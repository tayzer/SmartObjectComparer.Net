@namespace ComparisonTool.Web.Components.Shared
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@implements IDisposable

<div class="form-group mt-3">
    <label>@Label</label>
    <div class="d-flex flex-column gap-2">
        <div class="d-flex gap-2">
            <InputFile class="form-control" OnChange="HandleFileUpload" multiple />
            <button class="btn btn-outline-primary" @onclick="TriggerFolderUpload" type="button">
                <i class="bi bi-folder"></i> Select Folder
            </button>
            <span class="badge bg-info d-flex align-items-center">
                @if (Files.Count > 0)
                {
                    <span>@Files.Count files</span>
                }
            </span>
        </div>
        <!-- Hidden folder input for JS batch upload -->
        <input type="file" id="jsFolderInput_@_folderInputId" style="display:none" multiple webkitdirectory directory />
    </div>

    @if (IsProcessing)
    {
        <div class="mt-3">
            <div class="progress" style="height: 20px;">
                <div class="progress-bar progress-bar-striped progress-bar-animated"
                     role="progressbar"
                     style="width: @ProgressPercentage%;">
                    @ProcessingStatus
                </div>
            </div>
            <small class="text-muted">@ProcessingStatus</small>
        </div>
    }

    @if (Files.Any())
    {
        <div class="mt-3">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <span>Files (@Files.Count)</span>
                    <div>
                        <button class="btn btn-sm btn-outline-danger" @onclick="ClearAllFiles">
                            Clear All
                        </button>
                    </div>
                </div>
                <div style="max-height: 200px; overflow-y: auto;">
                    @if (Files.Count > 50)
                    {
                        <div class="p-3 text-center">
                            <p>@Files.Count files selected.</p>
                            <p><small class="text-muted">File list not shown for performance reasons.</small></p>
                            @if (HasMultipleFolders)
                            {
                                <div class="mt-2 alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i> Files are from multiple folders
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var folderGroup in GetFolderGroups().Take(5))
                            {
                                <li class="list-group-item bg-light">
                                    <small><strong>@(string.IsNullOrEmpty(folderGroup.Key) ? "Root" : folderGroup.Key)</strong></small>
                                </li>

                                @foreach (var file in folderGroup.Take(10))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <small>@GetFileNameOnly(file)</small>
                                        </div>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveFile(file)">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </li>
                                }

                                @if (folderGroup.Count() > 10)
                                {
                                    <li class="list-group-item text-center">
                                        <small>And @(folderGroup.Count() - 10) more files in this folder...</small>
                                    </li>
                                }
                            }

                            @if (GetFolderGroups().Count() > 5)
                            {
                                <li class="list-group-item text-center">
                                    <small>And @(GetFolderGroups().Count() - 5) more folders...</small>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public List<string> Files { get; set; } = new();

    [Parameter]
    public EventCallback<List<string>> OnFilesChanged { get; set; }

    private bool IsProcessing { get; set; } = false;
    private int ProcessedFiles { get; set; } = 0;
    private int TotalFiles { get; set; } = 0;
    private string ProcessingStatus => $"Processed {ProcessedFiles} of {TotalFiles} files";
    private double ProgressPercentage => TotalFiles == 0 ? 0 : (double)ProcessedFiles / TotalFiles * 100;
    private bool HasMultipleFolders => GetFolderGroups().Count() > 1;

    private string _folderInputId = Guid.NewGuid().ToString("N");
    private DotNetObjectReference<FolderUploadPanel> _dotNetRef;

    protected override void OnInitialized()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

    private async Task TriggerFolderUpload()
    {
        string fullInputId = $"jsFolderInput_{_folderInputId}";
        // Only trigger the input dialog; upload will be handled by JS after user selects files
        await JSRuntime.InvokeVoidAsync("triggerFolderInput", fullInputId, 25, _dotNetRef);
    }

    [JSInvokable]
    public Task OnBatchUploadProgress(int uploaded, int total)
    {
        IsProcessing = true;
        ProcessedFiles = uploaded;
        TotalFiles = total;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnBatchUploadComplete(string fileListJson)
    {
        IsProcessing = false;
        // Parse the JSON string returned from the backend (should be { uploaded: N, files: [ ... ] })
        var fileList = System.Text.Json.JsonSerializer.Deserialize<UploadResponse>(fileListJson);
        Files = fileList?.files ?? new List<string>();
        await OnFilesChanged.InvokeAsync(Files);
        StateHasChanged();
    }

    [JSInvokable]
    public Task OnBatchUploadError(string error)
    {
        IsProcessing = false;
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("alert", $"Batch upload error: {error}");
        return Task.CompletedTask;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await ProcessUploadedFiles(e.GetMultipleFiles(), false);
    }

    private async Task ProcessUploadedFiles(IReadOnlyList<IBrowserFile> selectedFiles, bool isFolder)
    {
        if (selectedFiles.Count == 0)
            return;

        try
        {
            IsProcessing = true;
            ProcessedFiles = 0;
            TotalFiles = selectedFiles.Count;
            StateHasChanged();

            // Set reasonable limits
            var maxFileSize = 50 * 1024 * 1024; // 50MB per file
            var batchSize = 25; // Process files in batches of 25

            int totalBatches = (selectedFiles.Count + batchSize - 1) / batchSize;
            int xmlFileCount = 0;
            int skippedFiles = 0;

            for (int batch = 0; batch < totalBatches; batch++)
            {
                int startIdx = batch * batchSize;
                int endIdx = Math.Min(startIdx + batchSize, selectedFiles.Count);
                var batchFileNames = new List<string>();

                for (int i = startIdx; i < endIdx; i++)
                {
                    var file = selectedFiles[i];
                    if (file.Size > maxFileSize)
                    {
                        skippedFiles++;
                        continue;
                    }
                    bool isSupportedFile = file.Name.EndsWith(".xml", StringComparison.OrdinalIgnoreCase) || 
                                           file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase);
                    if (!isSupportedFile)
                    {
                        skippedFiles++;
                        continue;
                    }
                    xmlFileCount++;
                    string fileName = isFolder ? file.Name : GetFileNameOnly(file.Name);
                    batchFileNames.Add(fileName);
                }

                ProcessedFiles = Math.Min(endIdx, selectedFiles.Count);
                StateHasChanged();
                await Task.Delay(10); // Let UI update
            }

            // Update file list with just the file names (not streams)
            Files = selectedFiles
                .Where(f => (f.Name.EndsWith(".xml", StringComparison.OrdinalIgnoreCase) || 
                            f.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase)) && 
                            f.Size <= maxFileSize)
                .Select(f => isFolder ? f.Name : GetFileNameOnly(f.Name))
                .ToList();
            await OnFilesChanged.InvokeAsync(Files);

            if (skippedFiles > 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Loaded {xmlFileCount} supported files (XML/JSON). Skipped {skippedFiles} unsupported or too large files.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading files: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RemoveFile(string file)
    {
        var updatedFiles = Files.Where(f => f != file).ToList();
        Files = updatedFiles;
        await OnFilesChanged.InvokeAsync(updatedFiles);
    }

    private async Task ClearAllFiles()
    {
        Files.Clear();
        await OnFilesChanged.InvokeAsync(Files);
    }

    private IEnumerable<IGrouping<string, string>> GetFolderGroups()
    {
        return Files
            .GroupBy(f => GetFolderPath(f))
            .OrderBy(g => g.Key);
    }

    private string GetFolderPath(string fullPath)
    {
        // Extract folder path from full file path
        int lastSlashIndex = fullPath.LastIndexOf('/');
        if (lastSlashIndex < 0)
            lastSlashIndex = fullPath.LastIndexOf('\\');

        if (lastSlashIndex < 0)
            return string.Empty;

        return fullPath.Substring(0, lastSlashIndex);
    }

    private string GetFileNameOnly(string fullPath)
    {
        // Extract filename without the path
        int lastSlashIndex = fullPath.LastIndexOf('/');
        if (lastSlashIndex < 0)
            lastSlashIndex = fullPath.LastIndexOf('\\');

        if (lastSlashIndex < 0 || lastSlashIndex >= fullPath.Length - 1)
            return fullPath;

        return fullPath.Substring(lastSlashIndex + 1);
    }

    private class UploadResponse
    {
        public int uploaded { get; set; }
        public List<string> files { get; set; }
    }
}