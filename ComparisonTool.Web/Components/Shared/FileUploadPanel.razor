@namespace ComparisonTool.Web.Components.Shared
@inject IJSRuntime JSRuntime

<div class="form-group mt-3">
    <label>@Label</label>
    <div class="d-flex gap-2">
        @if (SupportsFolderUpload)
        {
            <InputFile class="form-control" OnChange="HandleFileUpload" multiple directory webkitdirectory />
        }
        else
        {
            <InputFile class="form-control" OnChange="HandleFileUpload" multiple />
            <small class="text-muted">Your browser doesn't support folder upload. Please select multiple files manually.</small>
        }
        <span class="badge bg-info d-flex align-items-center">
            @if (Files.Count > 0)
            {
                <span>@Files.Count files</span>
            }
        </span>
    </div>

    @if (Files.Any())
    {
        <div class="mt-2">
            <div class="card">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <span>Files (@Files.Count)</span>
                    <div>
                        <button class="btn btn-sm btn-outline-danger" @onclick="ClearAllFiles">
                            Clear All
                        </button>
                    </div>
                </div>
                <div style="max-height: 200px; overflow-y: auto;">
                    @if (Files.Count > 100)
                    {
                        <div class="p-3 text-center">
                            <p>@Files.Count files selected.</p>
                            <p><small class="text-muted">File list not shown for performance reasons.</small></p>
                        </div>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @for (int i = 0; i < Math.Min(Files.Count, 100); i++)
                            {
                                var index = i;
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <small>@Files[i].FileName</small>
                                    </div>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveFile(index)">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public List<(MemoryStream Stream, string FileName)> Files { get; set; } = new();

    [Parameter]
    public EventCallback<List<(MemoryStream Stream, string FileName)>> OnFilesChanged { get; set; }

    private bool SupportsFolderUpload { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Check if browser supports folder upload
        SupportsFolderUpload = await JSRuntime.InvokeAsync<bool>("checkFolderUploadSupport");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            // Set reasonable limits
            var maxAllowedFiles = 5000; // Higher limit for folder uploads
            var maxFileSize = 50 * 1024 * 1024; // 50MB per file
            var batchSize = 50; // Process files in batches of 50

            var selectedFiles = e.GetMultipleFiles(maxAllowedFiles);

            if (selectedFiles.Count >= maxAllowedFiles)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    $"You selected at least {maxAllowedFiles} files. Some files may not be processed.");
            }

            // Use progressive loading - first clear the display
            await JSRuntime.InvokeVoidAsync("showProcessingIndicator", "Processing files...");

            // Stream processor that doesn't load everything into memory at once
            await ProcessFilesInBatches(selectedFiles, batchSize, maxFileSize);

            await JSRuntime.InvokeVoidAsync("hideProcessingIndicator");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("hideProcessingIndicator");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading files: {ex.Message}");
        }
    }

    private async Task ProcessFilesInBatches(IReadOnlyList<IBrowserFile> selectedFiles, int batchSize, long maxFileSize)
    {
        // Create a temporary list that we'll fill in batches
        var updatedFiles = new List<(MemoryStream Stream, string FileName)>(Files);

        // Number of batches we'll need to process
        int totalBatches = (selectedFiles.Count + batchSize - 1) / batchSize;

        for (int batch = 0; batch < totalBatches; batch++)
        {
            int startIdx = batch * batchSize;
            int endIdx = Math.Min(startIdx + batchSize, selectedFiles.Count);

            // Process this batch
            for (int i = startIdx; i < endIdx; i++)
            {
                var file = selectedFiles[i];

                // Skip files that are too large
                if (file.Size > maxFileSize)
                {
                    await JSRuntime.InvokeVoidAsync("console.warn", $"Skipping {file.Name} (too large)");
                    continue;
                }

                try
                {
                    // Process each file individually
                    // Use a streamed approach rather than loading the whole file at once
                    await using var stream = file.OpenReadStream(maxFileSize);
                    var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                    memoryStream.Position = 0;

                    updatedFiles.Add((Stream: memoryStream, FileName: file.Name));

                    // Update progress after each file
                    var progress = (double)(i + 1) / selectedFiles.Count * 100;
                    await JSRuntime.InvokeVoidAsync("updateProcessingProgress", progress, i + 1, selectedFiles.Count);
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"Error processing {file.Name}: {ex.Message}");
                }
            }

            // Update UI periodically and allow for garbage collection
            if (batch % 2 == 0 || batch == totalBatches - 1)
            {
                Files = updatedFiles.OrderBy(f => f.FileName).ToList();
                await OnFilesChanged.InvokeAsync(Files);
                StateHasChanged();

                // Give the UI a chance to update and garbage collect
                await Task.Delay(10);
            }
        }

        // Final update with all files sorted
        Files = updatedFiles.OrderBy(f => f.FileName).ToList();
        await OnFilesChanged.InvokeAsync(Files);
    }

    private async Task RemoveFile(int index)
    {
        if (index >= 0 && index < Files.Count)
        {
            var updatedFiles = new List<(MemoryStream, string)>(Files);
            updatedFiles.RemoveAt(index);
            Files = updatedFiles;
            await OnFilesChanged.InvokeAsync(updatedFiles);
        }
    }

    private async Task ClearAllFiles()
    {
        Files.Clear();
        await OnFilesChanged.InvokeAsync(Files);
    }
}