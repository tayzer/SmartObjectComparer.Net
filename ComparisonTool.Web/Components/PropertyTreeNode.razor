@using System.Reflection

<div class="tree-node" style="padding-left: @(Level * 15)px">
    @if (HasChildProperties)
    {
        <div class="d-flex align-items-center">
            <button class="btn btn-sm" @onclick="ToggleExpanded">
                <i class="bi @(Expanded ? "bi-chevron-down" : "bi-chevron-right")"></i>
            </button>
            <div class="@GetNodeClass()" style="cursor: pointer;" @onclick="SelectThisProperty">
                @DisplayName
                <small class="text-muted">@GetTypeDescription()</small>
            </div>
        </div>
        
        @if (Expanded)
        {
            <div class="child-nodes mt-1">
                @foreach (var property in GetChildProperties())
                {
                    var childPath = BuildChildPath(property);
                    var childType = GetPropertyType(property);
                    
                    <PropertyTreeNode Type="childType"
                                      Path="childPath"
                                      DisplayName="@property.Name"
                                      Level="Level + 1"
                                      OnPropertySelected="OnPropertySelected"
                                      SelectedPath="SelectedPath" />
                }
            </div>
        }
    }
    else
    {
        <div class="d-flex align-items-center">
            <div style="width: 24px; text-align: center">
                <i class="bi bi-dot"></i>
            </div>
            <div class="@GetNodeClass()" style="cursor: pointer;" @onclick="SelectThisProperty">
                @DisplayName
                <small class="text-muted">@GetTypeDescription()</small>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Type Type { get; set; }
    
    [Parameter]
    public string Path { get; set; }
    
    [Parameter]
    public string DisplayName { get; set; }
    
    [Parameter]
    public bool Expanded { get; set; }
    
    [Parameter]
    public int Level { get; set; }
    
    [Parameter]
    public EventCallback<string> OnPropertySelected { get; set; }
    
    [Parameter]
    public string SelectedPath { get; set; }
    
    private bool HasChildProperties => Type != null && 
                                      !Type.IsPrimitive && 
                                      Type != typeof(string) &&
                                      Type != typeof(DateTime) &&
                                      Type != typeof(Guid) &&
                                      !Type.IsEnum &&
                                      GetChildProperties().Any();
                                      
    private async Task SelectThisProperty()
    {
        Console.WriteLine($"Selecting property: {Path}");
        if (!string.IsNullOrEmpty(Path))
        {
            await OnPropertySelected.InvokeAsync(Path);
        }
    }
    
    private void ToggleExpanded()
    {
        Expanded = !Expanded;
    }
    
    private IEnumerable<PropertyInfo> GetChildProperties()
    {
        if (Type == null) return Enumerable.Empty<PropertyInfo>();
        
        // Skip primitive types, strings, etc.
        if (Type.IsPrimitive || 
            Type == typeof(string) || 
            Type == typeof(DateTime) ||
            Type == typeof(Guid) ||
            Type.IsEnum)
        {
            return Enumerable.Empty<PropertyInfo>();
        }
        
        // For collections, show the collection property itself, not its items
        if (typeof(System.Collections.IEnumerable).IsAssignableFrom(Type) && 
            Type != typeof(string))
        {
            // This is a collection
            return Enumerable.Empty<PropertyInfo>();
        }
        
        // Return all public properties for complex types
        return Type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                  .Where(p => p.CanRead);
    }
    
    private string BuildChildPath(PropertyInfo property)
    {
        if (string.IsNullOrEmpty(Path))
            return property.Name;
            
        return $"{Path}.{property.Name}";
    }
    
    private Type GetPropertyType(PropertyInfo property)
    {
        var type = property.PropertyType;
        
        // For collections, return the element type
        if (typeof(System.Collections.IEnumerable).IsAssignableFrom(type) && 
            type != typeof(string))
        {
            if (type.IsGenericType)
            {
                var genericArgs = type.GetGenericArguments();
                if (genericArgs.Length > 0)
                    return genericArgs[0];
            }
            else if (type.IsArray)
            {
                return type.GetElementType();
            }
        }
        
        return type;
    }
    
    private string GetNodeClass()
    {
        var classes = new List<string> { "property-name" };
        
        if (Path == SelectedPath)
        {
            classes.Add("text-primary fw-bold");
        }
        
        if (IsCollectionType())
        {
            classes.Add("collection-property");
        }
        
        return string.Join(" ", classes);
    }
    
    private bool IsCollectionType()
    {
        return Type != null &&
               typeof(System.Collections.IEnumerable).IsAssignableFrom(Type) &&
               Type != typeof(string);
    }
    
    private string GetTypeDescription()
    {
        if (Type == null) return "";
        
        if (Type.IsPrimitive)
            return GetFriendlyTypeName(Type);
            
        if (Type == typeof(string))
            return "string";
            
        if (Type == typeof(DateTime))
            return "datetime";
            
        if (Type == typeof(decimal))
            return "decimal";
            
        if (Type.IsEnum)
            return "enum";
            
        if (IsCollectionType())
        {
            var elementType = GetCollectionElementType();
            return $"List<{GetFriendlyTypeName(elementType)}>";
        }
        
        return "";
    }
    
    private Type GetCollectionElementType()
    {
        if (!IsCollectionType()) return Type;
        
        if (Type.IsGenericType)
        {
            var genericArgs = Type.GetGenericArguments();
            if (genericArgs.Length > 0)
                return genericArgs[0];
        }
        else if (Type.IsArray)
        {
            return Type.GetElementType();
        }
        
        return typeof(object);
    }
    
    private string GetFriendlyTypeName(Type type)
    {
        if (type == typeof(int)) return "int";
        if (type == typeof(string)) return "string";
        if (type == typeof(bool)) return "bool";
        if (type == typeof(double)) return "double";
        if (type == typeof(decimal)) return "decimal";
        if (type == typeof(float)) return "float";
        if (type == typeof(DateTime)) return "datetime";
        if (type == typeof(Guid)) return "guid";
        
        return type.Name;
    }
}