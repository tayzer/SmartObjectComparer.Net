@using KellermanSoftware.CompareNetObjects

<div class="card">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Cross-File Pattern Analysis</h5>
        <button class="btn btn-sm btn-outline-primary" @onclick="ExportPatternAnalysis">
            <i class="bi bi-download me-1"></i> Export Analysis
        </button>
    </div>
    <div class="card-body">
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Summary</h6>
                    </div>
                    <div class="card-body">
                        <p><strong>Total File Pairs:</strong> @Analysis.TotalFilesPaired</p>
                        <p><strong>Files With Differences:</strong> @Analysis.FilesWithDifferences</p>
                        <p><strong>Total Differences:</strong> @Analysis.TotalDifferences</p>

                        <div class="progress mb-2" style="height: 25px;">
                            <div class="progress-bar bg-success"
                                 style="width: @(((double)(Analysis.TotalFilesPaired - Analysis.FilesWithDifferences) / Analysis.TotalFilesPaired * 100).ToString())%">
                                @(Analysis.TotalFilesPaired - Analysis.FilesWithDifferences) Equal
                            </div>
                            <div class="progress-bar bg-danger"
                                 style="width: @(((double)Analysis.FilesWithDifferences / Analysis.TotalFilesPaired * 100).ToString())%">
                                @Analysis.FilesWithDifferences Different
                            </div>
                        </div>
                        <small class="text-muted">Percentage of files with differences</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Categories</h6>
                    </div>
                    <div class="card-body">
                        @{
                            var topCategories = Analysis.TotalByCategory
                            .Where(c => c.Value > 0)
                            .OrderByDescending(c => c.Value)
                            .Take(5);
                        }

                        @foreach (var category in topCategories)
                        {
                            var percentage = (double)category.Value / Analysis.TotalDifferences * 100;
                            <div class="mb-2">
                                <div class="d-flex justify-content-between">
                                    <span>@FormatCategoryName(category.Key)</span>
                                    <span class="text-muted">@category.Value (@percentage.ToString("F1")%)</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Similar File Groups</h6>
                    </div>
                    <div class="card-body">
                        @if (Analysis.SimilarFileGroups.Any())
                        {
                            <ul class="list-group">
                                @foreach (var group in Analysis.SimilarFileGroups.OrderByDescending(g => g.FileCount).Take(3))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @group.GroupName
                                        <span class="badge bg-primary rounded-pill">@group.FileCount files</span>
                                    </li>
                                }
                            </ul>

                            @if (Analysis.SimilarFileGroups.Count > 3)
                            {
                                <div class="text-center mt-2">
                                    <small>And @(Analysis.SimilarFileGroups.Count - 3) more groups</small>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No similar file groups identified.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Common Patterns Across Files</h6>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Properties that appear in multiple files</p>

                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Property Path</th>
                                        <th>Files Affected</th>
                                        <th>Occurrences</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pattern in Analysis.CommonPathPatterns.Take(8))
                                    {
                                        <tr>
                                            <td><code>@pattern.PatternPath</code></td>
                                            <td>@pattern.FileCount</td>
                                            <td>@pattern.OccurrenceCount</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (Analysis.CommonPathPatterns.Count > 8)
                        {
                            <div class="text-center">
                                <small>And @(Analysis.CommonPathPatterns.Count - 8) more patterns</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Common Value Changes</h6>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Specific property value changes that appear in multiple files</p>

                        <div class="accordion" id="valueChangesAccordion">
                            @for (int i = 0; i < Math.Min(Analysis.CommonPropertyChanges.Count, 5); i++)
                            {
                                var change = Analysis.CommonPropertyChanges[i];
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="heading-@i">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#collapse-@i">
                                            <code>@change.PropertyName</code>
                                            <span class="ms-2 badge bg-info">@change.AffectedFiles.Count files</span>
                                        </button>
                                    </h2>
                                    <div id="collapse-@i" class="accordion-collapse collapse"
                                         data-bs-parent="#valueChangesAccordion">
                                        <div class="accordion-body">
                                            @foreach (var valueChange in change.CommonChanges)
                                            {
                                                <div class="mb-2">
                                                    <div class="text-danger"><strong>From:</strong> @TruncateValue(valueChange.Key, 50)</div>
                                                    <div class="text-success"><strong>To:</strong> @TruncateValue(valueChange.Value, 50)</div>
                                                </div>
                                            }

                                            <div class="mt-2">
                                                <strong>Affected files:</strong>
                                                <ul class="mb-0">
                                                    @foreach (var file in change.AffectedFiles.Take(3))
                                                    {
                                                        <li><small>@file</small></li>
                                                    }
                                                    @if (change.AffectedFiles.Count > 3)
                                                    {
                                                        <li><small>And @(change.AffectedFiles.Count - 3) more...</small></li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ComparisonPatternAnalysis Analysis { get; set; }

    [Parameter]
    public EventCallback<string> OnExportAnalysis { get; set; }

    private async Task ExportPatternAnalysis()
    {
        if (Analysis != null)
        {
            // Delegate to parent component to handle export
            await OnExportAnalysis.InvokeAsync("pattern-analysis-report.md");
        }
    }

    private string FormatCategoryName(DifferenceCategory category)
    {
        switch (category)
        {
            case DifferenceCategory.TextContentChanged:
                return "Text Content";
            case DifferenceCategory.NumericValueChanged:
                return "Numeric Value";
            case DifferenceCategory.DateTimeChanged:
                return "Date/Time";
            case DifferenceCategory.BooleanValueChanged:
                return "Boolean Value";
            case DifferenceCategory.CollectionItemChanged:
                return "Collection Item";
            case DifferenceCategory.ItemAdded:
                return "Item Added";
            case DifferenceCategory.ItemRemoved:
                return "Item Removed";
            case DifferenceCategory.NullValueChange:
                return "Null Value";
            default:
                return "Other";
        }
    }

    private string TruncateValue(string value, int maxLength)
    {
        if (string.IsNullOrEmpty(value)) return "null";
        return value.Length <= maxLength ? value : value.Substring(0, maxLength - 3) + "...";
    }
}