@using ComparisonTool.Core.Comparison.Analysis
@using ComparisonTool.Core.Comparison.Results
@using KellermanSoftware.CompareNetObjects
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-header">
        <h4>Comparison Overview</h4>
    </div>
    <div class="card-body">
        @if (AreAllEqual)
        {
            <div class="alert alert-success d-flex align-items-center">
                <i class="bi bi-check-circle-fill me-3 fs-4"></i>
                <div>
                    <strong>@(FolderResult != null ? "All files are identical" : "Files are identical")</strong>
                    <div class="text-muted">
                        @if (FolderResult != null)
                        {
                            <span>No differences found in any of the @TotalFiles compared files.</span>
                        }
                        else
                        {
                            <span>No differences found according to current comparison rules.</span>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Additional Context for Folder Comparisons -->
            @if (FolderResult != null)
            {
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="alert alert-light border-0 py-2">
                            <div class="d-flex align-items-center justify-content-center">
                                <i class="bi bi-folder2-open me-2 text-primary"></i>
                                <span class="fw-medium">
                                    Analyzing @TotalFiles files: 
                                    <span class="text-success">@(TotalFiles - FilesWithDifferences) identical</span>, 
                                    <span class="text-warning">@FilesWithDifferences with differences</span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Key Metrics Row -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-4 text-warning">@TotalDifferences</div>
                        <div class="text-muted">Total Differences</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-4 text-info">@AggregatedCategoryCount.Count</div>
                        <div class="text-muted">Change Types</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-4 text-primary">@AggregatedObjectCount.Count</div>
                        <div class="text-muted">Affected Objects</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="display-4 text-secondary">@TotalPatterns</div>
                        <div class="text-muted">Patterns Found</div>
                    </div>
                </div>
            </div>

            <!-- Top Categories Summary -->
            <div class="row">
                <div class="col-md-6">
                    <h6>Most Common Change Types</h6>
                    <div class="mb-3">
                        @foreach (var category in AggregatedCategoryCount
                        .OrderByDescending(c => c.Value)
                        .Take(3))
                        {
                            var percentage = TotalDifferences > 0 ? Math.Round((double)category.Value / TotalDifferences * 100, 1) : 0;
                            
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="fw-medium">@FormatCategoryName(category.Key)</span>
                                <div class="d-flex align-items-center">
                                    <div class="progress me-2" style="width: 80px; height: 8px;">
                                        <div class="progress-bar bg-warning" style="width: @(percentage)%"></div>
                                    </div>
                                    <span class="text-muted">@category.Value (@percentage%)</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="col-md-6">
                    <h6>Most Affected Objects</h6>
                    <div class="mb-3">
                        @foreach (var obj in AggregatedObjectCount
                        .OrderByDescending(o => o.Value)
                        .Take(3))
                        {
                            var percentage = TotalDifferences > 0 ? Math.Round((double)obj.Value / TotalDifferences * 100, 1) : 0;
                            
                            <div class="mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="fw-medium text-break" style="max-width: 70%; word-break: break-all;" title="@obj.Key">@obj.Key</span>
                                    <div class="d-flex align-items-center flex-shrink-0">
                                        <div class="progress me-2" style="width: 60px; height: 8px;">
                                            <div class="progress-bar bg-primary" style="width: @(percentage)%"></div>
                                        </div>
                                        <span class="text-muted small">@obj.Value (@percentage%)</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Quick Insights -->
            @if (TotalPatterns > 0 && AggregatedCategoryCount.Any())
            {
                <div class="alert alert-light border">
                    <div class="d-flex align-items-start">
                        <i class="bi bi-lightbulb me-2 text-warning"></i>
                        <div>
                            <strong>Key Insight:</strong>
                            @{
                                var topCategory = AggregatedCategoryCount
                                .OrderByDescending(c => c.Value)
                                .First();
                            }
                            @if (FolderResult != null)
                            {
                                <span>Across @TotalFiles files, @TotalDifferences differences were found. </span>
                            }
                            Most changes are <strong>@FormatCategoryName(topCategory.Key)</strong> affecting 
                            @topCategory.Value properties@(TotalPatterns > 0 ? $" with {TotalPatterns} distinct patterns identified" : "").
                        </div>
                    </div>
                </div>
            }

            <!-- Testing Guidance -->
            <div class="alert alert-info border-0">
                <div class="d-flex align-items-start">
                    <i class="bi bi-info-circle me-2"></i>
                    <div>
                        <strong>Testing Focus:</strong>
                        @if (AggregatedCategoryCount.Any())
                        {
                            var topCategory = AggregatedCategoryCount
                            .OrderByDescending(c => c.Value)
                            .First();
                            
                            <span>Concentrate testing on <strong>@FormatCategoryName(topCategory.Key)</strong> changes</span>
                            
                            @if (AggregatedObjectCount.Any())
                            {
                                var topObject = AggregatedObjectCount
                                .OrderByDescending(o => o.Value)
                                .First();
                                
                                <span>, particularly in <strong style="word-break: break-all;">@topObject.Key</strong> objects</span>
                            }
                            @if (FolderResult != null)
                            {
                                <span> across the @FilesWithDifferences files that have differences</span>
                            }
                            <span>.</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public DifferenceSummary Summary { get; set; }

    [Parameter]
    public MultiFolderComparisonResult FolderResult { get; set; }

    // Computed properties for aggregated folder statistics
    private int TotalDifferences => FolderResult?.FilePairResults?.Sum(pair => pair.Summary?.TotalDifferenceCount ?? 0) ?? Summary.TotalDifferenceCount;

    private int FilesWithDifferences => FolderResult?.FilePairResults?.Count(pair => pair.Summary != null && !pair.Summary.AreEqual) ?? (Summary.AreEqual ? 0 : 1);

    private int TotalFiles => FolderResult?.FilePairResults?.Count ?? 1;

    private Dictionary<DifferenceCategory, int> AggregatedCategoryCount
    {
        get
        {
            if (FolderResult?.FilePairResults != null)
            {
                var aggregated = new Dictionary<DifferenceCategory, int>();
                foreach (var pair in FolderResult.FilePairResults)
                {
                    if (pair.Summary?.DifferencesByChangeType != null)
                    {
                        foreach (var category in pair.Summary.DifferencesByChangeType)
                        {
                            aggregated[category.Key] = aggregated.GetValueOrDefault(category.Key, 0) + category.Value.Count;
                        }
                    }
                }
                return aggregated;
            }
            return Summary.DifferencesByChangeType.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Count);
        }
    }

    private Dictionary<string, int> AggregatedObjectCount
    {
        get
        {
            if (FolderResult?.FilePairResults != null)
            {
                var aggregated = new Dictionary<string, int>();
                foreach (var pair in FolderResult.FilePairResults)
                {
                    if (pair.Summary?.DifferencesByRootObject != null)
                    {
                        foreach (var obj in pair.Summary.DifferencesByRootObject)
                        {
                            aggregated[obj.Key] = aggregated.GetValueOrDefault(obj.Key, 0) + obj.Value.Count;
                        }
                    }
                }
                return aggregated;
            }
            return Summary.DifferencesByRootObject.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Count);
        }
    }

    private int TotalPatterns => FolderResult?.FilePairResults?.Sum(pair => pair.Summary?.CommonPatterns?.Count ?? 0) ?? Summary.CommonPatterns.Count;

    private bool AreAllEqual => FolderResult?.AllEqual ?? Summary.AreEqual;

    private string FormatCategoryName(DifferenceCategory category)
    {
        return category switch
        {
            DifferenceCategory.TextContentChanged => "Text Changes",
            DifferenceCategory.NumericValueChanged => "Numeric Changes",
            DifferenceCategory.DateTimeChanged => "Date/Time Changes",
            DifferenceCategory.BooleanValueChanged => "Boolean Changes",
            DifferenceCategory.CollectionItemChanged => "Collection Structure Changes",
            DifferenceCategory.ItemAdded => "Added Items",
            DifferenceCategory.ItemRemoved => "Removed Items",
            DifferenceCategory.NullValueChange => "Null Value Changes",
            DifferenceCategory.ValueChanged => "Property Value Changes",
            DifferenceCategory.GeneralValueChanged => "General Changes",
            _ => "Other Changes"
        };
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text ?? "";

        return text.Substring(0, maxLength - 3) + "...";
    }
}