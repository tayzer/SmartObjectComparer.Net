@namespace ComparisonTool.Web.Components.Comparison
@using ComparisonTool.Core.Comparison.Analysis
@using KellermanSoftware.CompareNetObjects

<div class="card mt-4">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Semantic Difference Groups</h5>
        <button class="btn btn-sm btn-outline-primary" @onclick="ExportSemanticAnalysis">
            <i class="bi bi-download me-1"></i> Export Analysis
        </button>
    </div>
    <div class="card-body">
        @if (Analysis?.SemanticGroups == null || !Analysis.SemanticGroups.Any())
        {
            <div class="alert alert-info">
                No semantic difference groups have been identified.
            </div>
        }
        else
        {
            <div class="mb-3">
                <div class="progress" style="height: 25px;">
                    <div class="progress-bar bg-success"
                         style="width: @($"{Analysis.CategorizedPercentage:F1}%")">
                        @($"{Analysis.CategorizedPercentage:F1}% of differences semantically grouped")
                    </div>
                </div>
                <small class="text-muted">
                    @Analysis.CategorizedDifferences of @Analysis.TotalDifferences differences have been semantically categorized
                </small>
            </div>

            <div class="alert alert-info">
                <i class="bi bi-info-circle-fill me-2"></i>
                <strong>What are Semantic Groups?</strong>
                These groups organize differences by their functional meaning rather than just by type.
                This helps you focus testing on related changes that might impact similar business logic.
            </div>

            <div class="row mb-4">
                <div class="col-12">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Semantic Group</th>
                                    <th>Description</th>
                                    <th>Differences</th>
                                    <th>Files</th>
                                    <th>Confidence</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var group in Analysis.SemanticGroups)
                                {
                                    <tr @onclick="() => SelectGroup(group)" class="@(SelectedGroup == group ? "table-primary" : "")">
                                        <td><strong>@group.GroupName</strong></td>
                                        <td>@group.SemanticDescription</td>
                                        <td>@group.DifferenceCount</td>
                                        <td>@group.FileCount</td>
                                        <td>
                                            <div class="progress" style="height: 10px;">
                                                <div class="progress-bar @GetConfidenceColorClass(group.ConfidenceLevel)"
                                                     style="width: @($"{group.ConfidenceLevel}%")"></div>
                                            </div>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="() => SelectGroup(group)">
                                                View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            @if (SelectedGroup != null)
            {
                <div class="card">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">@SelectedGroup.GroupName Details</h6>
                    </div>
                    <div class="card-body">
                        <p>@SelectedGroup.SemanticDescription</p>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header">Affected Properties</div>
                                    <div class="card-body">
                                        <ul class="list-group">
                                            @foreach (var prop in SelectedGroup.RelatedProperties.Take(10))
                                            {
                                                <li class="list-group-item">
                                                    <code>@prop</code>
                                                </li>
                                            }
                                            @if (SelectedGroup.RelatedProperties.Count > 10)
                                            {
                                                <li class="list-group-item text-center">
                                                    <small>And @(SelectedGroup.RelatedProperties.Count - 10) more...</small>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header">Affected Files</div>
                                    <div class="card-body">
                                        <ul class="list-group">
                                            @foreach (var file in SelectedGroup.AffectedFiles.Take(10))
                                            {
                                                <li class="list-group-item">
                                                    <small>@file</small>
                                                </li>
                                            }
                                            @if (SelectedGroup.AffectedFiles.Count > 10)
                                            {
                                                <li class="list-group-item text-center">
                                                    <small>And @(SelectedGroup.AffectedFiles.Count - 10) more...</small>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <h6 class="mt-3">Example Differences</h6>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Property</th>
                                        <th>Old Value</th>
                                        <th>New Value</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var diff in SelectedGroup.Differences.Take(10))
                                    {
                                        <tr>
                                            <td><code>@diff.PropertyName</code></td>
                                            <td class="text-danger">@FormatValue(diff.Object1Value)</td>
                                            <td class="text-success">@FormatValue(diff.Object2Value)</td>
                                        </tr>
                                    }
                                    @if (SelectedGroup.Differences.Count > 10)
                                    {
                                        <tr>
                                            <td colspan="3" class="text-center">
                                                <small>And @(SelectedGroup.Differences.Count - 10) more differences...</small>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="alert alert-info mt-3">
                            <i class="bi bi-lightbulb-fill me-2"></i>
                            <strong>Testing Recommendation:</strong>
                            When testing these changes, focus on validating that @SelectedGroup.GroupName.ToLower()
                            are correctly handled throughout the application, especially for properties like
                            <code>@(SelectedGroup.RelatedProperties.FirstOrDefault() ?? "")</code>.

                            @{
                                var recommendation = GetTestingRecommendation(SelectedGroup.GroupName);
                                if (!string.IsNullOrEmpty(recommendation))
                                {
                                    <div class="mt-2">@recommendation</div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public SemanticDifferenceAnalysis Analysis { get; set; }

    [Parameter]
    public EventCallback<string> OnExportAnalysis { get; set; }

    private SemanticDifferenceGroup SelectedGroup { get; set; }

    private void SelectGroup(SemanticDifferenceGroup group)
    {
        SelectedGroup = group;
    }

    private async Task ExportSemanticAnalysis()
    {
        if (Analysis != null)
        {
            await OnExportAnalysis.InvokeAsync("semantic-analysis-report.md");
        }
    }

    private string GetConfidenceColorClass(int confidence)
    {
        if (confidence >= 80) return "bg-success";
        if (confidence >= 60) return "bg-info";
        if (confidence >= 40) return "bg-warning";
        return "bg-danger";
    }

    private string FormatValue(object value)
    {
        if (value == null)
            return "null";

        if (value is DateTime dt)
            return dt.ToString("yyyy-MM-dd HH:mm:ss");

        if (value is string str && str.Length > 50)
            return str.Substring(0, 47) + "...";

        return value.ToString();
    }

    private string GetTestingRecommendation(string groupName)
    {
        return groupName switch
        {
            "Status Changes" => "Verify the status transitions are valid according to business rules. Check that UI correctly reflects different statuses with appropriate styling. Confirm status-dependent behaviors work correctly.",

            "ID Value Changes" => "Ensure consistent ID usage across related entities. Verify reference integrity - check that the new IDs are used consistently. Test lookup operations using the new ID values.",

            "Timestamp/Date Changes" => "Verify date calculations and comparisons. Check date formatting in different contexts. Test date-sensitive business logic.",

            "Score/Value Adjustments" => "Test calculations that depend on these values. Validate thresholds and boundaries still function correctly. Check that UI elements properly represent the new values.",

            "Name/Description Changes" => "Check for text truncation in UI components. Verify translated content if localization is supported. Test search/filter functionality with the new text values.",

            "Collection Order Changes" => "Verify sort operations behave correctly. Check pagination if applicable. Test operations that rely on specific positions within collections.",

            "Tag Modifications" => "Test filtering and categorization features. Verify tag-based reporting. Check for visual indication of tags in the UI.",

            _ => null
        };
    }
}