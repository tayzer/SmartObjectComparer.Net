@namespace ComparisonTool.Web.Components.Comparison
@using ComparisonTool.Core
@using ComparisonTool.Core.Comparison.Configuration
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using Microsoft.JSInterop

@inject IComparisonConfigurationService ConfigService
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-header">
        <h5>Step 2: Configure Comparison Options</h5>
    </div>
    <div class="card-body">
        <h6>Global Settings</h6>
        <div class="form-check form-switch mb-2">
            <input class="form-check-input" type="checkbox" id="ignoreCollectionOrderSwitch" @bind="IgnoreCollectionOrder" @bind:after="() => OnIgnoreCollectionOrderChanged.InvokeAsync(IgnoreCollectionOrder)" />
            <label class="form-check-label" for="ignoreCollectionOrderSwitch">Ignore Collection Order Globally</label>
        </div>
        <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" id="ignoreStringCaseSwitch" @bind="IgnoreStringCase" @bind:after="() => OnIgnoreStringCaseChanged.InvokeAsync(IgnoreStringCase)" />
            <label class="form-check-label" for="ignoreStringCaseSwitch">Ignore String Case Globally</label>
        </div>

        <h6>Analysis Options</h6>
        <div class="form-check form-switch mb-2">
            <input class="form-check-input" type="checkbox" id="enablePatternAnalysisSwitch" @bind="EnablePatternAnalysis" @bind:after="() => OnEnablePatternAnalysisChanged.InvokeAsync(EnablePatternAnalysis)" />
            <label class="form-check-label" for="enablePatternAnalysisSwitch">Enable Pattern Analysis</label>
        </div>
        <div class="form-check form-switch mb-2">
            <input class="form-check-input" type="checkbox" id="enableSemanticAnalysisSwitch" @bind="EnableSemanticAnalysis" @bind:after="() => OnEnableSemanticAnalysisChanged.InvokeAsync(EnableSemanticAnalysis)" />
            <label class="form-check-label" for="enableSemanticAnalysisSwitch">Enable Semantic Analysis</label>
        </div>
        <div class="form-check form-switch mb-2">
            <input class="form-check-input" type="checkbox" id="enableStructuralAnalysisSwitch" @bind="EnableStructuralAnalysis" @bind:after="() => OnEnableStructuralAnalysisChanged.InvokeAsync(EnableStructuralAnalysis)" />
            <label class="form-check-label" for="enableStructuralAnalysisSwitch">Enable Structural Analysis</label>
        </div>
        <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" id="enableEnhancedStructuralAnalysisSwitch" @bind="EnableEnhancedStructuralAnalysis" @bind:after="() => OnEnableEnhancedStructuralAnalysisChanged.InvokeAsync(EnableEnhancedStructuralAnalysis)" />
            <label class="form-check-label" for="enableEnhancedStructuralAnalysisSwitch">Enable Enhanced Structural Analysis</label>
        </div>

        <h6>Property Specific Rules</h6>
        <button class="btn btn-sm btn-outline-primary mb-2" @onclick="OpenPropertySelector" disabled="@(!IsModelSelected)">
            <i class="bi bi-list-nested me-1"></i> Add/Edit Property Rule
        </button>
        @if (!IsModelSelected)
        {
            <small class="d-block text-muted">Select a model first to add property rules.</small>
        }

        @if (IgnoreRules.Any())
        {
            <ul class="list-group list-group-flush mb-3">
                @foreach (var rule in IgnoreRules)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center p-1">
                        <span>
                            <i class="bi bi-diagram-3 me-1"></i> @rule.PropertyPath
                            <small class="text-muted ms-2">(@GetRuleDescription(rule))</small>
                        </span>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => OnIgnoreRuleRemoved.InvokeAsync(rule)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No property-specific rules added.</p>
        }
        
        @* --- Import/Export Buttons --- *@
        <div class="d-flex justify-content-start gap-2 mt-3 mb-3">
             <InputFile OnChange="HandleImportFileSelected" accept=".json" id="import-config-input" style="display: none;" />
             <button class="btn btn-sm btn-outline-secondary" onclick="document.getElementById('import-config-input').click();">
                 <i class="bi bi-upload me-1"></i> Import Config...
             </button>
             <button class="btn btn-sm btn-outline-secondary" @onclick="ExportConfiguration" disabled="@(!IgnoreRules.Any())">
                 <i class="bi bi-download me-1"></i> Export Config
             </button>
        </div>
         @if (!string.IsNullOrEmpty(importStatusMessage))
         {
             <div class="alert @(importStatusIsError ? "alert-danger" : "alert-success") mt-2 p-2" role="alert">
                 @importStatusMessage
             </div>
         }
        
    </div>
    <div class="card-footer text-end">
        <button class="btn btn-success" @onclick="OnRunComparison" disabled="@(!CanRunComparison)">
            <i class="bi bi-play-fill me-1"></i> Run Comparison
        </button>
    </div>
</div>

@code {
    [Parameter] public bool IgnoreCollectionOrder { get; set; }
    [Parameter] public EventCallback<bool> OnIgnoreCollectionOrderChanged { get; set; }
    [Parameter] public bool IgnoreStringCase { get; set; } 
    [Parameter] public EventCallback<bool> OnIgnoreStringCaseChanged { get; set; }
    [Parameter] public bool EnablePatternAnalysis { get; set; }
    [Parameter] public EventCallback<bool> OnEnablePatternAnalysisChanged { get; set; }
    [Parameter] public bool EnableSemanticAnalysis { get; set; }
    [Parameter] public EventCallback<bool> OnEnableSemanticAnalysisChanged { get; set; }
    [Parameter] public bool EnableStructuralAnalysis { get; set; }
    [Parameter] public EventCallback<bool> OnEnableStructuralAnalysisChanged { get; set; }
    [Parameter] public bool EnableEnhancedStructuralAnalysis { get; set; }
    [Parameter] public EventCallback<bool> OnEnableEnhancedStructuralAnalysisChanged { get; set; }
    [Parameter] public List<IgnoreRule> IgnoreRules { get; set; } = new List<IgnoreRule>();
    [Parameter] public EventCallback<IgnoreRule> OnIgnoreRuleAdded { get; set; }
    [Parameter] public EventCallback<IgnoreRule> OnIgnoreRuleRemoved { get; set; }
    [Parameter] public Type ModelType { get; set; }
    [Parameter] public EventCallback OnPropertySelectorOpened { get; set; }
    [Parameter] public EventCallback OnRunComparison { get; set; }
    [Parameter] public bool CanRunComparison { get; set; }

    private bool IsModelSelected => ModelType != null;
    private string importStatusMessage = string.Empty;
    private bool importStatusIsError = false;

    private async Task OpenPropertySelector()
    {
        await OnPropertySelectorOpened.InvokeAsync();
    }

    private string GetRuleDescription(IgnoreRule rule)
    {
        var parts = new List<string>();
        if (rule.IgnoreCompletely) parts.Add("Ignore Completely");
        if (rule.IgnoreCollectionOrder) parts.Add("Ignore Order");
        return string.Join(", ", parts);
    }

    // --- Export Logic ---
    private async Task ExportConfiguration()
    {
        importStatusMessage = string.Empty; // Clear any previous import status
        if (!IgnoreRules.Any())
        {
            importStatusMessage = "No rules to export.";
            importStatusIsError = true;
            return;
        }

        try
        {
            // Use a local list from the parameter to ensure we export what's shown
            var rulesToExport = IgnoreRules;
            var json = JsonSerializer.Serialize(rulesToExport, new JsonSerializerOptions { WriteIndented = true });
            var fileName = $"comparison_config_{DateTime.Now:yyyyMMdd_HHmmss}.json";

            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, "application/json", json);
        }
        catch (Exception ex)
        {
            importStatusMessage = $"Export failed: {ex.Message}";
            importStatusIsError = true;
            // Optionally log the full exception
        }
    }

    // --- Import Logic ---
    private async Task HandleImportFileSelected(InputFileChangeEventArgs e)
    {
        importStatusMessage = string.Empty;
        importStatusIsError = false;
        var file = e.File;

        if (file == null)
        {
            importStatusMessage = "No file selected.";
            importStatusIsError = true;
            return;
        }

        if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
        {
            importStatusMessage = "Invalid file type. Please select a .json configuration file.";
            importStatusIsError = true;
            return;
        }

        try
        {
            // Limit file size (e.g., 1MB)
            long maxFileSize = 1 * 1024 * 1024; 
            if (file.Size > maxFileSize)
            {
                 importStatusMessage = $"File size exceeds the limit of {maxFileSize / 1024 / 1024} MB.";
                 importStatusIsError = true;
                 return;
            }

            // Read and deserialize
            List<IgnoreRule> importedRules;
            await using var stream = file.OpenReadStream(maxFileSize);
            using var reader = new StreamReader(stream);
            var json = await reader.ReadToEndAsync();
            
            importedRules = JsonSerializer.Deserialize<List<IgnoreRule>>(json);

            if (importedRules == null || !importedRules.Any())
            {
                importStatusMessage = "File does not contain valid rules or is empty.";
                importStatusIsError = true;
                return;
            }

            // Clear existing rules (using the remove callback for each)
            var currentRules = IgnoreRules.ToList(); // Copy to avoid modification issues
            foreach (var rule in currentRules)
            {
                await OnIgnoreRuleRemoved.InvokeAsync(rule); 
            }
            
            // Add imported rules (using the add callback)
            foreach (var rule in importedRules)
            {
                 // Re-create the rule without IgnoreCase
                await OnIgnoreRuleAdded.InvokeAsync(new IgnoreRule 
                {
                    PropertyPath = rule.PropertyPath,
                    IgnoreCompletely = rule.IgnoreCompletely,
                    IgnoreCollectionOrder = rule.IgnoreCollectionOrder
                });
            }

            importStatusMessage = $"Successfully imported {importedRules.Count} rules.";
            importStatusIsError = false;
        }
        catch (JsonException jsonEx)
        {
            importStatusMessage = $"Import failed: Invalid JSON format. {jsonEx.Message}";
            importStatusIsError = true;
        }
        catch (Exception ex)
        {
            importStatusMessage = $"Import failed: {ex.Message}";
            importStatusIsError = true;
        }
        
        // Trigger UI update
        StateHasChanged();
    }
}