@namespace ComparisonTool.Web.Components.Comparison
@using ComparisonTool.Core
@using ComparisonTool.Core.Comparison.Configuration
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using Microsoft.JSInterop

@inject IComparisonConfigurationService ConfigService
@inject IJSRuntime JSRuntime

<style>


    .ignore-rules-compact {
        margin-top: 0.5rem;
    }

    .rules-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        padding-bottom: 0.25rem;
        border-bottom: 1px solid #e9ecef;
    }

    .rules-count {
        font-weight: 600;
        color: #495057;
        font-size: 0.9rem;
    }

    .compact-rules-table {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #e9ecef;
        border-radius: 4px;
    }

    .rule-group-compact {
        background: #f8f9fa;
        padding: 0.25rem 0.5rem;
        border-bottom: 1px solid #e9ecef;
        font-size: 0.8rem;
        font-weight: 500;
        color: #6c757d;
    }

    .group-label {
        display: flex;
        align-items: center;
    }

    .rule-row {
        display: grid;
        grid-template-columns: 1fr auto auto;
        gap: 0.5rem;
        padding: 0.4rem 0.5rem;
        border-bottom: 1px solid #f1f3f4;
        align-items: center;
        transition: background-color 0.15s ease;
    }

    .rule-row:hover {
        background-color: #f8f9fa;
    }

    .rule-row:last-child {
        border-bottom: none;
    }

    .rule-path-compact {
        min-width: 0;
        overflow: hidden;
    }

    .rule-path-compact code {
        font-size: 0.8rem;
        color: #6f42c1;
        background: none;
        padding: 0;
        border-radius: 0;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        word-break: break-all;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
    }

    .rule-settings-compact {
        display: flex;
        gap: 0.25rem;
        align-items: center;
    }

    .setting-badge {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        font-size: 0.7rem;
        line-height: 1;
    }

    .setting-badge.ignore {
        background: #dc3545;
        color: white;
    }

    .setting-badge.order {
        background: #ffc107;
        color: #212529;
    }

    .rule-actions-compact {
        display: flex;
        align-items: center;
    }

    .btn-remove-compact {
        border: none;
        background: none;
        color: #6c757d;
        cursor: pointer;
        padding: 0.2rem;
        border-radius: 3px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        font-size: 0.8rem;
        transition: all 0.15s ease;
    }

    .btn-remove-compact:hover {
        background: #dc3545;
        color: white;
    }

    .empty-state-compact {
        padding: 1rem;
        text-align: center;
        color: #6c757d;
        font-style: italic;
        background: #f8f9fa;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    /* Mobile responsiveness */
    @@media (max-width: 768px) {
        .rule-row {
            grid-template-columns: 1fr auto;
            gap: 0.3rem;
        }
        
        .rule-settings-compact {
            grid-column: 1;
            justify-self: start;
            margin-top: 0.25rem;
        }
        
        .rule-actions-compact {
            grid-column: 2;
            grid-row: 1;
        }
        
        .compact-rules-table {
            max-height: 250px;
        }
    }
</style>

<div class="card">
    <div class="card-header">
        <h5>Step 2: Configure Comparison Options</h5>
    </div>
    <div class="card-body">
        <h6>Global Settings</h6>
        <div class="form-check form-switch mb-2">
            <input class="form-check-input" type="checkbox" id="ignoreCollectionOrderSwitch" @bind="IgnoreCollectionOrder" @bind:after="() => OnIgnoreCollectionOrderChanged.InvokeAsync(IgnoreCollectionOrder)" />
            <label class="form-check-label" for="ignoreCollectionOrderSwitch">Ignore Collection Order Globally</label>
        </div>
        <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" id="ignoreStringCaseSwitch" @bind="IgnoreStringCase" @bind:after="() => OnIgnoreStringCaseChanged.InvokeAsync(IgnoreStringCase)" />
            <label class="form-check-label" for="ignoreStringCaseSwitch">Ignore String Case Globally</label>
        </div>

        <h6>Analysis Options</h6>
        <div class="form-check form-switch mb-2">
            <input class="form-check-input" type="checkbox" id="enableSemanticAnalysisSwitch" @bind="EnableSemanticAnalysis" @bind:after="() => OnEnableSemanticAnalysisChanged.InvokeAsync(EnableSemanticAnalysis)" />
            <label class="form-check-label" for="enableSemanticAnalysisSwitch">Enable Semantic Analysis</label>
        </div>
        <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" id="enableEnhancedStructuralAnalysisSwitch" @bind="EnableEnhancedStructuralAnalysis" @bind:after="() => OnEnableEnhancedStructuralAnalysisChanged.InvokeAsync(EnableEnhancedStructuralAnalysis)" />
            <label class="form-check-label" for="enableEnhancedStructuralAnalysisSwitch">Enable Enhanced Structural Pattern Analysis</label>
        </div>

        <!-- Smart Ignore Rules Section - Collapsible -->
        <div class="mt-3 mb-3">
            <div class="d-flex align-items-center mb-2">
                <h6 class="mb-0 me-2">Smart Ignore Rules</h6>
                @{
                    var smartRulesCount = GetSmartIgnoreRules().Count;
                }
                @if (smartRulesCount > 0)
                {
                    <span class="badge bg-secondary me-2">@smartRulesCount active</span>
                }
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => IsSmartIgnoreCollapsed = !IsSmartIgnoreCollapsed">
                    <i class="bi @(IsSmartIgnoreCollapsed ? "bi-chevron-down" : "bi-chevron-up")"></i>
                    @(IsSmartIgnoreCollapsed ? "Show" : "Hide")
                </button>
            </div>
            
            @if (!IsSmartIgnoreCollapsed)
            {
                <SmartIgnoreConfigurationPanel SmartIgnoreRules="@GetSmartIgnoreRules()"
                                               OnRuleAdded="@HandleSmartIgnoreRuleAdded"
                                               OnRuleRemoved="@HandleSmartIgnoreRuleRemoved"
                                               OnPresetApplied="@HandleSmartIgnorePresetApplied"
                                               OnRulesCleared="@HandleSmartIgnoreRulesCleared" />
            }
        </div>

        <h6 class="mt-4">Tree Navigator (Visual Property Selection)</h6>
        <div class="d-flex gap-2 mb-2">
            <button class="btn btn-sm btn-outline-primary" @onclick="OpenPropertySelector" disabled="@(!IsModelSelected)">
                <i class="bi bi-list-nested me-1"></i> Simple Property Selector
            </button>
            <button class="btn btn-sm btn-outline-success" @onclick="OpenTreePropertySelector" disabled="@(!IsModelSelected)">
                <i class="bi bi-diagram-3 me-1"></i> Tree Navigator ⭐
            </button>
        </div>
        @if (!IsModelSelected)
        {
            <small class="d-block text-muted">Select a model first to browse and ignore properties.</small>
        }

        @if (IgnoreRules.Any())
        {
            <div class="ignore-rules-compact">
                <div class="rules-header">
                    <span class="rules-count">
                        <i class="bi bi-shield-x me-1"></i>
                        @IgnoreRules.Count Ignore Rules
                    </span>
                    <div class="d-flex align-items-center gap-2">
                        @if (IgnoreRules.Count > 10)
                        {
                            <small class="text-muted">Showing all rules in compact view</small>
                        }
                        <button class="btn btn-sm btn-outline-danger" @onclick="HandleClearAllIgnoreRules" title="Clear all ignore rules">
                            <i class="bi bi-trash me-1"></i> Clear All
                        </button>
                    </div>
                </div>
                
                <div class="compact-rules-table">
                    @{
                        var groupedRules = GetCompactRuleGroups();
                    }
                    
                    @foreach (var group in groupedRules)
                    {
                        @if (groupedRules.Count > 1)
                        {
                            <div class="rule-group-compact">
                                <span class="group-label">
                                    <i class="@group.Icon me-1"></i>@group.Name (@group.Rules.Count)
                                </span>
                            </div>
                        }
                        
                        @foreach (var rule in group.Rules)
                        {
                            <div class="rule-row">
                                <div class="rule-path-compact">
                                    <code>@rule.PropertyPath</code>
                                </div>
                                <div class="rule-settings-compact">
                                    @if (rule.IgnoreCompletely)
                                    {
                                        <span class="setting-badge ignore">
                                            <i class="bi bi-eye-slash"></i>
                                        </span>
                                    }
                                    @if (rule.IgnoreCollectionOrder)
                                    {
                                        <span class="setting-badge order">
                                            <i class="bi bi-arrow-down-up"></i>
                                        </span>
                                    }
                                </div>
                                <div class="rule-actions-compact">
                                    <button class="btn-remove-compact" 
                                            @onclick="() => OnIgnoreRuleRemoved.InvokeAsync(rule)"
                                            title="Remove rule">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
        else
        {
            <div class="empty-state-compact">
                <i class="bi bi-shield-check me-2"></i>
                <span>No ignore rules configured</span>
            </div>
        }
        
        @* --- Import/Export Buttons --- *@
        <div class="d-flex justify-content-start gap-2 mt-3 mb-3">
             <InputFile OnChange="HandleImportFileSelected" accept=".json" id="import-config-input" style="display: none;" />
             <button class="btn btn-sm btn-outline-secondary" onclick="document.getElementById('import-config-input').click();">
                 <i class="bi bi-upload me-1"></i> Import Config...
             </button>
             <button class="btn btn-sm btn-outline-secondary" @onclick="ExportConfiguration" disabled="@(!IgnoreRules.Any())">
                 <i class="bi bi-download me-1"></i> Export Config
             </button>
        </div>
         @if (!string.IsNullOrEmpty(importStatusMessage))
         {
             <div class="alert @(importStatusIsError ? "alert-danger" : "alert-success") mt-2 p-2" role="alert">
                 @importStatusMessage
             </div>
         }
        
    </div>
    <div class="card-footer text-end">
        <button class="btn btn-success" @onclick="OnRunComparison" disabled="@(!CanRunComparison)">
            <i class="bi bi-play-fill me-1"></i> Run Comparison
        </button>
    </div>
</div>

@code {
    [Parameter] public bool IgnoreCollectionOrder { get; set; }
    [Parameter] public EventCallback<bool> OnIgnoreCollectionOrderChanged { get; set; }
    [Parameter] public bool IgnoreStringCase { get; set; } 
    [Parameter] public EventCallback<bool> OnIgnoreStringCaseChanged { get; set; }
    [Parameter] public bool EnableSemanticAnalysis { get; set; }
    [Parameter] public EventCallback<bool> OnEnableSemanticAnalysisChanged { get; set; }
    [Parameter] public bool EnableEnhancedStructuralAnalysis { get; set; }
    [Parameter] public EventCallback<bool> OnEnableEnhancedStructuralAnalysisChanged { get; set; }
    [Parameter] public List<IgnoreRule> IgnoreRules { get; set; } = new List<IgnoreRule>();
    [Parameter] public EventCallback<IgnoreRule> OnIgnoreRuleAdded { get; set; }
    [Parameter] public EventCallback<IgnoreRule> OnIgnoreRuleRemoved { get; set; }
    [Parameter] public EventCallback OnIgnoreRulesCleared { get; set; }
    [Parameter] public Type ModelType { get; set; }
    [Parameter] public EventCallback OnPropertySelectorOpened { get; set; }
    [Parameter] public EventCallback OnTreePropertySelectorOpened { get; set; }
    [Parameter] public EventCallback OnRunComparison { get; set; }
    [Parameter] public bool CanRunComparison { get; set; }

    private bool IsModelSelected => ModelType != null;
    private string importStatusMessage = string.Empty;
    private bool importStatusIsError = false;
    private bool IsSmartIgnoreCollapsed = true; // Start collapsed to reduce visual noise

    private async Task OpenPropertySelector()
    {
        await OnPropertySelectorOpened.InvokeAsync();
    }

    private async Task OpenTreePropertySelector()
    {
        await OnTreePropertySelectorOpened.InvokeAsync();
    }

    // Smart Ignore Rules handling
    private List<SmartIgnoreRule> GetSmartIgnoreRules()
    {
        return ConfigService.GetSmartIgnoreRules().ToList();
    }

    private async Task HandleSmartIgnoreRuleAdded(SmartIgnoreRule rule)
    {
        ConfigService.AddSmartIgnoreRule(rule);
        StateHasChanged();
    }

    private async Task HandleSmartIgnoreRuleRemoved(SmartIgnoreRule rule)
    {
        ConfigService.RemoveSmartIgnoreRule(rule);
        StateHasChanged();
    }

    private async Task HandleSmartIgnorePresetApplied(string presetName)
    {
        ConfigService.ApplySmartIgnorePreset(presetName);
        StateHasChanged();
    }

    private async Task HandleSmartIgnoreRulesCleared()
    {
        ConfigService.ClearSmartIgnoreRules();
        StateHasChanged();
    }

    private async Task HandleClearAllIgnoreRules()
    {
        ConfigService.ClearIgnoreRules();
        await OnIgnoreRulesCleared.InvokeAsync();
        StateHasChanged();
    }

    private string GetRuleDescription(IgnoreRule rule)
    {
        var parts = new List<string>();
        if (rule.IgnoreCompletely) parts.Add("Ignore Completely");
        if (rule.IgnoreCollectionOrder) parts.Add("Ignore Order");
        return string.Join(", ", parts);
    }

    // Helper classes and methods for compact UI
    private class CompactRuleGroup
    {
        public string Name { get; set; }
        public string Icon { get; set; }
        public List<IgnoreRule> Rules { get; set; } = new();
    }

    private List<CompactRuleGroup> GetCompactRuleGroups()
    {
        var groups = new List<CompactRuleGroup>();

        // Simple Properties (single level)
        var simpleRules = IgnoreRules.Where(r => !r.PropertyPath.Contains('.') && !r.PropertyPath.Contains('['))
                                   .OrderBy(r => r.PropertyPath)
                                   .ToList();
        if (simpleRules.Any())
        {
            groups.Add(new CompactRuleGroup
            {
                Name = "Root Properties",
                Icon = "bi bi-house",
                Rules = simpleRules
            });
        }

        // Nested Properties (multiple levels but not collections)
        var nestedRules = IgnoreRules.Where(r => r.PropertyPath.Contains('.') && 
                                               !r.PropertyPath.Contains('[') && 
                                               !r.PropertyPath.Contains(']'))
                                    .OrderBy(r => r.PropertyPath)
                                    .ToList();
        if (nestedRules.Any())
        {
            groups.Add(new CompactRuleGroup
            {
                Name = "Nested Properties",
                Icon = "bi bi-diagram-3",
                Rules = nestedRules
            });
        }

        // Collection Properties
        var collectionRules = IgnoreRules.Where(r => r.PropertyPath.Contains('[') && r.PropertyPath.Contains(']'))
                                        .OrderBy(r => r.PropertyPath)
                                        .ToList();
        if (collectionRules.Any())
        {
            groups.Add(new CompactRuleGroup
            {
                Name = "Collections",
                Icon = "bi bi-collection",
                Rules = collectionRules
            });
        }

        // If only one group or few rules, don't group them
        if (groups.Count == 1 || IgnoreRules.Count <= 5)
        {
            return new List<CompactRuleGroup>
            {
                new CompactRuleGroup
                {
                    Name = "All Rules",
                    Icon = "bi bi-list",
                    Rules = IgnoreRules.OrderBy(r => r.PropertyPath).ToList()
                }
            };
        }

        return groups;
    }

    // --- Export Logic ---
    private async Task ExportConfiguration()
    {
        importStatusMessage = string.Empty; // Clear any previous import status
        if (!IgnoreRules.Any())
        {
            importStatusMessage = "No rules to export.";
            importStatusIsError = true;
            return;
        }

        try
        {
            // Use a local list from the parameter to ensure we export what's shown
            var rulesToExport = IgnoreRules;
            var json = JsonSerializer.Serialize(rulesToExport, new JsonSerializerOptions { WriteIndented = true });
            var fileName = $"comparison_config_{DateTime.Now:yyyyMMdd_HHmmss}.json";

            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, "application/json", json);
        }
        catch (Exception ex)
        {
            importStatusMessage = $"Export failed: {ex.Message}";
            importStatusIsError = true;
            // Optionally log the full exception
        }
    }

    // --- Import Logic ---
    private async Task HandleImportFileSelected(InputFileChangeEventArgs e)
    {
        importStatusMessage = string.Empty;
        importStatusIsError = false;
        var file = e.File;

        if (file == null)
        {
            importStatusMessage = "No file selected.";
            importStatusIsError = true;
            return;
        }

        if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
        {
            importStatusMessage = "Invalid file type. Please select a .json configuration file.";
            importStatusIsError = true;
            return;
        }

        try
        {
            // Limit file size (e.g., 1MB)
            long maxFileSize = 1 * 1024 * 1024; 
            if (file.Size > maxFileSize)
            {
                 importStatusMessage = $"File size exceeds the limit of {maxFileSize / 1024 / 1024} MB.";
                 importStatusIsError = true;
                 return;
            }

            // Read and deserialize
            List<IgnoreRule> importedRules;
            await using var stream = file.OpenReadStream(maxFileSize);
            using var reader = new StreamReader(stream);
            var json = await reader.ReadToEndAsync();
            
            importedRules = JsonSerializer.Deserialize<List<IgnoreRule>>(json);

            if (importedRules == null || !importedRules.Any())
            {
                importStatusMessage = "File does not contain valid rules or is empty.";
                importStatusIsError = true;
                return;
            }

            // Clear existing rules (using the remove callback for each)
            var currentRules = IgnoreRules.ToList(); // Copy to avoid modification issues
            foreach (var rule in currentRules)
            {
                await OnIgnoreRuleRemoved.InvokeAsync(rule); 
            }
            
            // Add imported rules (using the add callback)
            foreach (var rule in importedRules)
            {
                 // Re-create the rule without IgnoreCase
                await OnIgnoreRuleAdded.InvokeAsync(new IgnoreRule 
                {
                    PropertyPath = rule.PropertyPath,
                    IgnoreCompletely = rule.IgnoreCompletely,
                    IgnoreCollectionOrder = rule.IgnoreCollectionOrder
                });
            }

            importStatusMessage = $"Successfully imported {importedRules.Count} rules.";
            importStatusIsError = false;
        }
        catch (JsonException jsonEx)
        {
            importStatusMessage = $"Import failed: Invalid JSON format. {jsonEx.Message}";
            importStatusIsError = true;
        }
        catch (Exception ex)
        {
            importStatusMessage = $"Import failed: {ex.Message}";
            importStatusIsError = true;
        }
        
        // Trigger UI update
        StateHasChanged();
    }
}