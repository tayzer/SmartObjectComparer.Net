@using ComparisonTool.Core.Comparison.Configuration
@using System.Reflection
@using System.Reflection
@using BlazorBootstrap

<style>
    .ignored-properties-container {
        margin-top: 1rem;
    }

    .ignored-properties-header {
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }

        .ignored-properties-header h6 {
            color: #495057;
            font-weight: 600;
        }

    .ignored-properties-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .ignored-property-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 0.75rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.2s ease;
    }

        .ignored-property-card:hover {
            border-color: #007bff;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.1);
        }

    .property-info {
        flex: 1;
        min-width: 0;
    }

    .property-path {
        margin-bottom: 0.5rem;
    }

        .property-path code {
            font-size: 0.875rem;
            color: #6f42c1;
            background: #f8f9fa;
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            word-break: break-word;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        }

    .property-settings {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

        .property-settings .badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
        }

    .property-actions {
        margin-left: 1rem;
    }

    .no-ignored-properties {
        text-align: center;
        padding: 2rem 1rem;
        color: #6c757d;
        background: #f8f9fa;
        border-radius: 6px;
    }

    .empty-state-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state-text {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        color: #495057;
    }

    .bulk-actions-toolbar {
        background: #e7f3ff;
        border: 1px solid #b3d9ff;
        border-radius: 6px;
        padding: 0.75rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .selection-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
        color: #0056b3;
    }

    .bulk-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .property-row-selected {
        background-color: #e7f3ff !important;
    }

    .select-all-row {
        background-color: #f8f9fa;
        font-weight: 500;
    }

    @@media (max-width: 768px) {
        .ignored-property-card {
            flex-direction: column;
            align-items: stretch;
        }

        .property-actions {
            margin-left: 0;
            margin-top: 0.75rem;
            align-self: flex-end;
        }

        .bulk-actions-toolbar {
            flex-direction: column;
            align-items: stretch;
        }

        .bulk-actions {
            justify-content: center;
        }
    }
</style>

<Modal @ref="propertyModal" Title="Select Properties to Ignore" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="row">
            <div class="col-12">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Search properties..."
                           @bind-value="searchTerm" @bind-value:event="oninput" />
                    <button class="btn btn-outline-secondary" type="button" @onclick="SearchProperties">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>

                <!-- Bulk Actions Toolbar -->
                @if (selectedProperties.Any())
                {
                    <div class="bulk-actions-toolbar">
                        <div class="selection-info">
                            <i class="bi bi-check-square"></i>
                            <span>@selectedProperties.Count of @FilteredProperties.Count properties selected</span>
                        </div>
                        <div class="bulk-actions">
                            <button class="btn btn-sm btn-success" @onclick="ShowBulkIgnoreConfirmation">
                                <i class="bi bi-eye-slash"></i> Ignore All Selected
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearAllSelections">
                                <i class="bi bi-x-square"></i> Clear Selection
                            </button>
                        </div>
                    </div>
                }

                <div class="mt-3">
                    <h5>All Properties</h5>
                    <div style="max-height: 400px; overflow-y: auto;">
                        <table class="table table-hover">
                            <thead class="sticky-top">
                                <tr class="select-all-row">
                                    <th style="width: 40px;">
                                        <input class="form-check-input" type="checkbox"
                                               checked="@selectAll"
                                               @onchange="ToggleSelectAll"
                                               title="Select/Deselect All" />
                                    </th>
                                    <th>Property Path</th>
                                    <th>Type</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var prop in FilteredProperties)
                                {
                                    var isSelected = selectedProperties.Contains(prop.Path);
                                    <tr class="@(isSelected ? "property-row-selected" : "")"
                                        @onclick="() => TogglePropertySelection(prop.Path)">
                                        <td>
                                            <input class="form-check-input" type="checkbox"
                                                   checked="@isSelected"
                                                   @onchange="(e) => TogglePropertySelectionFromCheckbox(e, prop.Path)"
                                                   @onclick:stopPropagation="true" />
                                        </td>
                                        <td @onclick="() => SelectProperty(prop.Path)" style="cursor: pointer;"
                                            class="@(selectedProperty == prop.Path ? "text-primary fw-bold" : "")">
                                            @prop.Path
                                        </td>
                                        <td>@prop.TypeName</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => SelectProperty(prop.Path)">
                                                Configure
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="mt-4">
                    <h5>Selected Property Configuration</h5>
                    @if (!string.IsNullOrEmpty(selectedProperty))
                    {
                        <div class="alert alert-info">
                            <strong>@selectedProperty</strong>
                        </div>

                        <div class="card">
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="ignoreProperty"
                                           @bind="IgnoreProperty">
                                    <label class="form-check-label" for="ignoreProperty">
                                        Ignore this property completely
                                    </label>
                                </div>

                                @if (IsCollectionProperty(selectedProperty))
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="ignoreOrdering"
                                               @bind="IgnoreCollectionOrder" disabled="@IgnoreProperty">
                                        <label class="form-check-label" for="ignoreOrdering">
                                            Ignore collection ordering
                                        </label>
                                    </div>
                                }

                                <button class="btn btn-success mt-3" @onclick="AddCurrentProperty">
                                    <i class="bi bi-plus-circle"></i> Add to Ignore List
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary">
                            No property selected. Select a property from the list above.
                        </div>
                    }
                </div>

                <div class="mt-4">
                    <h5>Currently Ignored Properties</h5>
                    @if (IgnoredProperties.Any())
                    {
                        <div class="ignored-properties-container">
                            <div class="ignored-properties-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-shield-x me-2"></i>
                                    Currently Ignored Properties
                                    <span class="badge bg-secondary ms-2">@IgnoredProperties.Count</span>
                                </h6>
                                <small class="text-muted">Properties that will be excluded from comparison</small>
                            </div>

                            <div class="ignored-properties-list">
                                @foreach (var rule in IgnoredProperties.OrderBy(r => r.PropertyPath))
                                {
                                    <div class="ignored-property-card">
                                        <div class="property-info">
                                            <div class="property-path">
                                                <i class="bi bi-diagram-3 me-2 text-primary"></i>
                                                <code>@rule.PropertyPath</code>
                                            </div>
                                            <div class="property-settings">
                                                @if (rule.IgnoreCompletely)
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="bi bi-eye-slash me-1"></i>Ignore Completely
                                                    </span>
                                                }
                                                @if (rule.IgnoreCollectionOrder)
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="bi bi-arrow-down-up me-1"></i>Ignore Order
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                        <div class="property-actions">
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="() => RemoveIgnoredProperty(rule.PropertyPath)"
                                                    title="Remove ignore rule">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="no-ignored-properties">
                            <div class="empty-state-icon">
                                <i class="bi bi-shield-check"></i>
                            </div>
                            <p class="empty-state-text">No properties are currently being ignored</p>
                            <small class="text-muted">Select properties from the tree above to add ignore rules</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="ClosePropertySelector">Close</Button>
    </FooterTemplate>
</Modal>

<!-- Bulk Ignore Confirmation Modal -->
<Modal @ref="bulkIgnoreModal" Title="Confirm Bulk Ignore" Size="ModalSize.Regular">
    <BodyTemplate>
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Bulk Ignore Confirmation</strong>
        </div>
        <p>You are about to ignore <strong>@selectedProperties.Count properties</strong> completely from comparison.</p>

        @if (isProcessingBulkIgnore)
        {
            <div class="mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span>Processing...</span>
                    <span>@bulkIgnoreProgress%</span>
                </div>
                <div class="progress mb-2">
                    <div class="progress-bar progress-bar-striped progress-bar-animated"
                         role="progressbar"
                         style="width: @(bulkIgnoreProgress)%"
                         aria-valuenow="@bulkIgnoreProgress"
                         aria-valuemin="0"
                         aria-valuemax="100"></div>
                </div>
                <small class="text-muted">@bulkIgnoreStatus</small>
            </div>
        }
        else
        {
            <div class="mb-3">
                <label class="form-label">Ignore Settings for All Selected Properties:</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="bulkIgnoreCompletely" @bind="bulkIgnoreCompletely">
                    <label class="form-check-label" for="bulkIgnoreCompletely">
                        <i class="bi bi-eye-slash"></i> Ignore completely
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="bulkIgnoreCollectionOrder"
                           @bind="bulkIgnoreCollectionOrder" disabled="@bulkIgnoreCompletely">
                    <label class="form-check-label" for="bulkIgnoreCollectionOrder">
                        <i class="bi bi-arrow-down-up"></i> Ignore collection ordering (for collection properties)
                    </label>
                </div>
            </div>
        }

        @if (selectedProperties.Count > 10)
        {
            <div class="alert alert-info">
                <strong>Preview of properties to be ignored:</strong>
                <ul class="mb-0 mt-2">
                    @foreach (var prop in selectedProperties.Take(10))
                    {
                        <li><code>@prop</code></li>
                    }
                    <li><em>... and @(selectedProperties.Count - 10) more properties</em></li>
                </ul>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <strong>Properties to be ignored:</strong>
                <ul class="mb-0 mt-2">
                    @foreach (var prop in selectedProperties)
                    {
                        <li><code>@prop</code></li>
                    }
                </ul>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="ExecuteBulkIgnore" Disabled="@isProcessingBulkIgnore">
            @if (isProcessingBulkIgnore)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                <text>Processing...</text>
            }
            else
            {
                <i class="bi bi-check"></i>
                <text>Confirm Ignore</text>
            }
        </Button>
        <Button Color="ButtonColor.Secondary" @onclick="CancelBulkIgnore" Disabled="@isProcessingBulkIgnore">Cancel</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter]
    public Type ModelType { get; set; }

    [Parameter]
    public List<IgnoreRule> IgnoredProperties { get; set; } = new List<IgnoreRule>();

    [Parameter]
    public EventCallback<IgnoreRule> OnPropertyAdded { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<IgnoreRule>> OnPropertiesBatchAdded { get; set; }

    [Parameter]
    public EventCallback<string> OnPropertyRemoved { get; set; }

    private Modal propertyModal;
    private Modal bulkIgnoreModal;
    private string selectedProperty;
    private string searchTerm = "";
    private bool IgnoreProperty { get; set; }
    private bool IgnoreCollectionOrder { get; set; }
    private bool bulkIgnoreCompletely { get; set; } = true;
    private bool bulkIgnoreCollectionOrder { get; set; } = false;
    private bool isProcessingBulkIgnore { get; set; } = false;
    private int bulkIgnoreProgress { get; set; } = 0;
    private string bulkIgnoreStatus { get; set; } = "";

    private List<PropertyInfo> AllProperties { get; set; } = new List<PropertyInfo>();
    private List<PropertyViewModel> FilteredProperties { get; set; } = new List<PropertyViewModel>();
    private List<string> selectedProperties = new List<string>();
    private bool selectAll = false;

    private class PropertyViewModel
    {
        public string Path { get; set; }
        public string TypeName { get; set; }
    }

    public async Task ShowAsync()
    {
        if (ModelType != null)
        {
            if (FilteredProperties.Count == 0)
            {
                LoadAllProperties();
            }

            searchTerm = "";

            FilteredProperties = FilteredProperties.ToList();
        }

        ResetSelectionState();
        await propertyModal.ShowAsync();
    }

    private void LoadAllProperties()
    {
        if (FilteredProperties.Count == 0)
        {
            var paths = GetAllPropertyPaths(ModelType);
            FilteredProperties = paths.Select(p => new PropertyViewModel
                {
                    Path = p.Key,
                    TypeName = GetFriendlyTypeName(p.Value)
                }).ToList();
        }
    }

    private Dictionary<string, Type> GetAllPropertyPaths(Type type, string basePath = "", int depth = 0, HashSet<Type> visitedTypes = null)
    {
        var result = new Dictionary<string, Type>();

        visitedTypes ??= new HashSet<Type>();

        if (depth > 8 || visitedTypes.Contains(type))
        {
            return result;
        }

        visitedTypes.Add(type);

        foreach (var prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            string path = string.IsNullOrEmpty(basePath) ? prop.Name : $"{basePath}.{prop.Name}";
            result[path] = prop.PropertyType;

            // Recursively process complex properties
            if (!prop.PropertyType.IsPrimitive &&
                prop.PropertyType != typeof(string) &&
                prop.PropertyType != typeof(DateTime) &&
                prop.PropertyType != typeof(Guid) &&
                !prop.PropertyType.IsEnum)
            {
                // For collections, add [*] notation and process element type
                if (typeof(System.Collections.IEnumerable).IsAssignableFrom(prop.PropertyType) &&
                    prop.PropertyType != typeof(string))
                {
                    Type elementType = null;

                    if (prop.PropertyType.IsGenericType)
                    {
                        var genericArgs = prop.PropertyType.GetGenericArguments();
                        if (genericArgs.Length > 0)
                            elementType = genericArgs[0];
                    }
                    else if (prop.PropertyType.IsArray)
                    {
                        elementType = prop.PropertyType.GetElementType();
                    }

                    if (elementType != null && (elementType != typeof(string)))
                    {
                        // Add collection path
                        result[$"{path}[*]"] = prop.PropertyType;

                        if (!visitedTypes.Contains(elementType))
                        {
                            // Log collection path for debugging
                            Console.WriteLine($"Adding collection path: {path}[*] of type {elementType.Name}");

                            // Process element type properties
                            // For complex element types, we need to go deeper to find all nested properties
                            // This especially helps with nested objects inside collection items
                            var childProps = GetAllPropertyPaths(elementType, $"{path}[*]", depth + 1);
                            foreach (var childProp in childProps)
                            {
                                // Log child property of collection for debugging
                                Console.WriteLine($"  - Adding collection sub-property: {childProp.Key}");
                                result[childProp.Key] = childProp.Value;
                            }
                        }
                    }
                }
                else
                {
                    // Process regular complex type
                    var childProps = GetAllPropertyPaths(prop.PropertyType, path, depth + 1, visitedTypes);
                    foreach (var childProp in childProps)
                    {
                        result[childProp.Key] = childProp.Value;
                    }
                }
            }
        }

        return result;
    }

    private void SearchProperties()
    {
        Console.WriteLine($"Searching for: {searchTerm}");

        if (FilteredProperties.Count == 0)
        {
            LoadAllProperties();
        }

        var allProperties = FilteredProperties;

        if (string.IsNullOrEmpty(searchTerm))
        {
            // If search is empty, show all properties (already loaded)
        }
        else
        {
            FilteredProperties = allProperties
                .Where(p => p.Path.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Update select all state based on filtered results
        UpdateSelectAllState();
        StateHasChanged();
    }

    private void SelectProperty(string propertyPath)
    {
        Console.WriteLine($"Selected property: {propertyPath}");
        selectedProperty = propertyPath;

        var existingRule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == propertyPath);
        if (existingRule != null)
        {
            IgnoreProperty = existingRule.IgnoreCompletely;
            IgnoreCollectionOrder = existingRule.IgnoreCollectionOrder;
        }
        else
        {
            // Default values when selecting a new property
            IgnoreProperty = false; // Default to NOT ignore completely
            IgnoreCollectionOrder = false;
        }

        StateHasChanged();
    }

    private void ResetSelectionState()
    {
        selectedProperty = null;
        IgnoreProperty = false;
        IgnoreCollectionOrder = false;
        selectedProperties.Clear();
        selectAll = false;
    }

    private void UpdateSelectAllState()
    {
        // Update select all checkbox state based on current selections
        if (FilteredProperties.Any())
        {
            var filteredPaths = FilteredProperties.Select(p => p.Path).ToList();
            selectAll = filteredPaths.All(path => selectedProperties.Contains(path));
        }
        else
        {
            selectAll = false;
        }
    }

    private async Task AddCurrentProperty()
    {
        if (string.IsNullOrEmpty(selectedProperty))
            return;

        var rule = new IgnoreRule
            {
                PropertyPath = selectedProperty,
                IgnoreCompletely = IgnoreProperty,
                IgnoreCollectionOrder = IgnoreCollectionOrder
            };

        // Remove existing rule for this property if it exists
        var existingRule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == selectedProperty);
        if (existingRule != null)
        {
            IgnoredProperties.Remove(existingRule);
        }

        IgnoredProperties.Add(rule);

        await OnPropertyAdded.InvokeAsync(rule);

        ResetSelectionState();
    }

    private async Task RemoveIgnoredProperty(string propertyPath)
    {
        var rule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == propertyPath);
        if (rule != null)
        {
            IgnoredProperties.Remove(rule);
            await OnPropertyRemoved.InvokeAsync(propertyPath);
        }
    }

    private void ClosePropertySelector()
    {
        propertyModal.HideAsync();
    }

    private bool IsCollectionProperty(string propertyPath)
    {
        return propertyPath.Contains("[") ||
               propertyPath.EndsWith("List") ||
               propertyPath.EndsWith("Collection") ||
               propertyPath.EndsWith("Array");
    }

    private bool IsStringProperty(string propertyPath)
    {
        var prop = FilteredProperties.FirstOrDefault(p => p.Path == propertyPath);
        return prop?.TypeName == "string";
    }

    private bool IsNumericProperty(string propertyPath)
    {
        var prop = FilteredProperties.FirstOrDefault(p => p.Path == propertyPath);
        var typeName = prop?.TypeName;

        return typeName == "int" ||
               typeName == "double" ||
               typeName == "decimal" ||
               typeName == "float" ||
               typeName == "long";
    }

    private string GetFriendlyTypeName(Type type)
    {
        if (type == typeof(int)) return "int";
        if (type == typeof(string)) return "string";
        if (type == typeof(bool)) return "bool";
        if (type == typeof(double)) return "double";
        if (type == typeof(decimal)) return "decimal";
        if (type == typeof(float)) return "float";
        if (type == typeof(DateTime)) return "datetime";
        if (type == typeof(Guid)) return "guid";

        if (typeof(System.Collections.IEnumerable).IsAssignableFrom(type) && type != typeof(string))
        {
            Type elementType = null;

            if (type.IsGenericType)
            {
                var genericArgs = type.GetGenericArguments();
                if (genericArgs.Length > 0)
                    elementType = genericArgs[0];
            }
            else if (type.IsArray)
            {
                elementType = type.GetElementType();
            }

            if (elementType != null)
                return $"List<{GetFriendlyTypeName(elementType)}>";
            else
                return "Collection";
        }

        return type.Name;
    }

    private string GetIgnoreRuleDescription(IgnoreRule rule)
    {
        var options = new List<string>();

        if (rule.IgnoreCompletely)
            options.Add("ignore completely");

        if (rule.IgnoreCollectionOrder)
            options.Add("ignore order");

        return options.Any() ? string.Join(", ", options) : "No specific rules";
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        selectAll = (bool)(e.Value ?? false);

        if (selectAll)
        {
            // Select all filtered properties
            var filteredPaths = FilteredProperties.Select(p => p.Path).ToList();
            foreach (var path in filteredPaths)
            {
                if (!selectedProperties.Contains(path))
                {
                    selectedProperties.Add(path);
                }
            }
        }
        else
        {
            // Deselect all filtered properties
            var filteredPaths = FilteredProperties.Select(p => p.Path).ToList();
            foreach (var path in filteredPaths)
            {
                selectedProperties.Remove(path);
            }
        }
        StateHasChanged();
    }

    private void TogglePropertySelection(string propertyPath)
    {
        if (selectedProperties.Contains(propertyPath))
        {
            selectedProperties.Remove(propertyPath);
        }
        else
        {
            selectedProperties.Add(propertyPath);
        }

        UpdateSelectAllState();
        StateHasChanged();
    }

    private void TogglePropertySelectionFromCheckbox(ChangeEventArgs e, string propertyPath)
    {
        var isChecked = (bool)(e.Value ?? false);

        if (isChecked && !selectedProperties.Contains(propertyPath))
        {
            selectedProperties.Add(propertyPath);
        }
        else if (!isChecked && selectedProperties.Contains(propertyPath))
        {
            selectedProperties.Remove(propertyPath);
        }

        UpdateSelectAllState();
        StateHasChanged();
    }

    private async Task ShowBulkIgnoreConfirmation()
    {
        if (!selectedProperties.Any())
            return;

        // Reset bulk ignore settings to defaults
        bulkIgnoreCompletely = true;
        bulkIgnoreCollectionOrder = false;

        await bulkIgnoreModal.ShowAsync();
    }

    private async Task ExecuteBulkIgnore()
    {
        if (!selectedProperties.Any())
            return;

        try
        {
            // Show loading state
            isProcessingBulkIgnore = true;
            bulkIgnoreProgress = 0;
            var propertiesCount = selectedProperties.Count;
            bulkIgnoreStatus = $"Starting bulk ignore for {propertiesCount} properties...";
            StateHasChanged();

            Console.WriteLine($"Starting bulk ignore for {propertiesCount} properties...");

            // Process in batches to avoid UI freezing
            var batchSize = 50; // Process 50 properties at a time
            var batches = selectedProperties
                .Select((property, index) => new { property, index })
                .GroupBy(x => x.index / batchSize)
                .Select(g => g.Select(x => x.property).ToList())
                .ToList();

            var processedCount = 0;

            for (int batchIndex = 0; batchIndex < batches.Count; batchIndex++)
            {
                var batch = batches[batchIndex];
                bulkIgnoreStatus = $"Processing batch {batchIndex + 1}/{batches.Count} ({batch.Count} properties)";
                Console.WriteLine(bulkIgnoreStatus);

                                var batchRules = new List<IgnoreRule>();
                
                foreach (var propertyPath in batch)
                {
                    var rule = new IgnoreRule
                        {
                            PropertyPath = propertyPath,
                            IgnoreCompletely = bulkIgnoreCompletely,
                            IgnoreCollectionOrder = !bulkIgnoreCompletely && bulkIgnoreCollectionOrder && IsCollectionProperty(propertyPath)
                        };

                    // Remove existing rule for this property if it exists
                    var existingRule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == propertyPath);
                    if (existingRule != null)
                    {
                        IgnoredProperties.Remove(existingRule);
                    }

                    IgnoredProperties.Add(rule);
                    batchRules.Add(rule);
                    
                    processedCount++;
                    bulkIgnoreProgress = (int)((double)processedCount / propertiesCount * 100);
                }

                // Process entire batch at once for better performance
                if (OnPropertiesBatchAdded.HasDelegate)
                {
                    await OnPropertiesBatchAdded.InvokeAsync(batchRules);
                }
                else
                {
                    // Fallback to individual processing if batch method not available
                    foreach (var rule in batchRules)
                    {
                        await OnPropertyAdded.InvokeAsync(rule);
                    }
                }

                // Allow UI to update between batches
                StateHasChanged();
                await Task.Delay(10); // Small delay to prevent UI blocking
            }

            bulkIgnoreStatus = $"Bulk ignore completed successfully for {propertiesCount} properties";
            Console.WriteLine(bulkIgnoreStatus);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during bulk ignore: {ex.Message}");
            // Continue with cleanup even if there was an error
        }
        finally
        {
            // Clear selections and close modal
            isProcessingBulkIgnore = false;
            bulkIgnoreProgress = 0;
            bulkIgnoreStatus = "";
            selectedProperties.Clear();
            selectAll = false;
            await bulkIgnoreModal.HideAsync();
            StateHasChanged();
        }
    }

    private async Task CancelBulkIgnore()
    {
        await bulkIgnoreModal.HideAsync();
    }

    private void ClearAllSelections()
    {
        selectedProperties.Clear();
        selectAll = false;
        StateHasChanged();
    }
}