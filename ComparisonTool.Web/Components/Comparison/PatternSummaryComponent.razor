@using ComparisonTool.Core.Comparison.Analysis
@using KellermanSoftware.CompareNetObjects

<div class="card">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Cross-File Pattern Analysis</h5>
        <button class="btn btn-sm btn-outline-primary" @onclick="ExportPatternAnalysis">
            <i class="bi bi-download me-1"></i> Export Analysis
        </button>
    </div>
    <div class="card-body">
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Summary</h6>
                    </div>
                    <div class="card-body">
                        <p><strong>Total File Pairs:</strong> @Analysis.TotalFilesPaired</p>
                        <p><strong>Files With Differences:</strong> @Analysis.FilesWithDifferences</p>
                        <p><strong>Total Differences:</strong> @Analysis.TotalDifferences</p>

                        <div class="progress mb-2" style="height: 25px;">
                            <div class="progress-bar bg-success"
                                 style="width: @(((double)(Analysis.TotalFilesPaired - Analysis.FilesWithDifferences) / Analysis.TotalFilesPaired * 100).ToString())%">
                                @(Analysis.TotalFilesPaired - Analysis.FilesWithDifferences) Equal
                            </div>
                            <div class="progress-bar bg-danger"
                                 style="width: @(((double)Analysis.FilesWithDifferences / Analysis.TotalFilesPaired * 100).ToString())%">
                                @Analysis.FilesWithDifferences Different
                            </div>
                        </div>
                        <small class="text-muted">Percentage of files with differences</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Categories</h6>
                    </div>
                    <div class="card-body">
                        @{
                            var topCategories = Analysis.TotalByCategory
                            .Where(c => c.Value > 0)
                            .OrderByDescending(c => c.Value)
                            .Take(5);
                        }

                        @foreach (var category in topCategories)
                        {
                            var percentage = (double)category.Value / Analysis.TotalDifferences * 100;
                            <div class="mb-2">
                                <div class="d-flex justify-content-between">
                                    <span>@FormatCategoryName(category.Key)</span>
                                    <span class="text-muted">@category.Value (@percentage.ToString("F1")%)</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Similar File Groups</h6>
                    </div>
                    <div class="card-body">
                        @if (Analysis.SimilarFileGroups.Any())
                        {
                            <ul class="list-group">
                                @foreach (var group in Analysis.SimilarFileGroups.OrderByDescending(g => g.FileCount).Take(3))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @group.GroupName
                                        <span class="badge bg-primary rounded-pill">@group.FileCount files</span>
                                    </li>
                                }
                            </ul>

                            @if (Analysis.SimilarFileGroups.Count > 3)
                            {
                                <div class="text-center mt-2">
                                    <small>And @(Analysis.SimilarFileGroups.Count - 3) more groups</small>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No similar file groups identified.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">Common Patterns Across Files</h6>
                        @if (Analysis.CommonPathPatterns.Count > 8)
                        {
                            <button class="btn btn-sm btn-outline-info" @onclick="() => ShowPatternModal()">
                                <i class="bi bi-eye"></i> View All (@Analysis.CommonPathPatterns.Count)
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Properties that appear in multiple files</p>

                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Property Path</th>
                                        <th>Files Affected</th>
                                        <th>Occurrences</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pattern in Analysis.CommonPathPatterns.Take(8))
                                    {
                                        <tr>
                                            <td><code>@pattern.PatternPath</code></td>
                                            <td>@pattern.FileCount</td>
                                            <td>@pattern.OccurrenceCount</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (Analysis.CommonPathPatterns.Count > 8)
                        {
                            <div class="text-center">
                                <small>Showing 8 of @Analysis.CommonPathPatterns.Count patterns</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">Common Value Changes</h6>
                        @if (Analysis.CommonPropertyChanges.Count > 5)
                        {
                            <button class="btn btn-sm btn-outline-info" @onclick="() => ShowValueChangesModal()">
                                <i class="bi bi-eye"></i> View All (@Analysis.CommonPropertyChanges.Count)
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Specific property value changes that appear in multiple files</p>

                        <div class="accordion" id="valueChangesAccordion">
                            @for (int i = 0; i < Math.Min(Analysis.CommonPropertyChanges.Count, 5); i++)
                            {
                                var change = Analysis.CommonPropertyChanges[i];
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="heading-@i">
                                        <button class="accordion-button collapsed" type="button"
                                                data-bs-toggle="collapse" data-bs-target="#collapse-@i">
                                            <code>@change.PropertyName</code>
                                            <span class="ms-2 badge bg-info">@change.AffectedFiles.Count files</span>
                                        </button>
                                    </h2>
                                    <div id="collapse-@i" class="accordion-collapse collapse"
                                         data-bs-parent="#valueChangesAccordion">
                                        <div class="accordion-body">
                                            @foreach (var valueChange in change.CommonChanges)
                                            {
                                                <div class="mb-2">
                                                    <div class="text-danger"><strong>From:</strong> @TruncateValue(valueChange.Key, 50)</div>
                                                    <div class="text-success"><strong>To:</strong> @TruncateValue(valueChange.Value, 50)</div>
                                                </div>
                                            }

                                            <div class="mt-2">
                                                <strong>Affected files:</strong>
                                                <ul class="mb-0">
                                                    @foreach (var file in change.AffectedFiles.Take(3))
                                                    {
                                                        <li><small>@file</small></li>
                                                    }
                                                    @if (change.AffectedFiles.Count > 3)
                                                    {
                                                        <li><small>And @(change.AffectedFiles.Count - 3) more...</small></li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (Analysis.CommonPropertyChanges.Count > 5)
                        {
                            <div class="text-center mt-2">
                                <small>Showing 5 of @Analysis.CommonPropertyChanges.Count changes</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pattern List Modal -->
@if (ShowPatternModalFlag)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Common Patterns Across Files</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowPatternModalFlag = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search patterns..." 
                                       @bind="PatternSearchText" @oninput="FilterPatterns" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="PatternSortBy" @bind:after="SortPatterns">
                                <option value="files">Sort by Files Affected</option>
                                <option value="occurrences">Sort by Occurrences</option>
                                <option value="path">Sort by Path</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="PatternPageSize" @bind:after="UpdatePatternPageSize">
                                <option value="10">10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                                <option value="100">100 per page</option>
                            </select>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Property Path</th>
                                    <th>Files Affected</th>
                                    <th>Occurrences</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pattern in GetPagedPatterns())
                                {
                                    <tr>
                                        <td><code>@pattern.PatternPath</code></td>
                                        <td>@pattern.FileCount</td>
                                        <td>@pattern.OccurrenceCount</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    @if (GetFilteredPatterns().Count() > PatternPageSize)
                    {
                        <nav>
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(PatternCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetPatternPage(PatternCurrentPage - 1)">Previous</button>
                                </li>
                                
                                @for (int pageNum = Math.Max(1, PatternCurrentPage - 2); pageNum <= Math.Min(GetPatternTotalPages(), PatternCurrentPage + 2); pageNum++)
                                {
                                    <li class="page-item @(pageNum == PatternCurrentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => SetPatternPage(pageNum)">@pageNum</button>
                                    </li>
                                }
                                
                                <li class="page-item @(PatternCurrentPage == GetPatternTotalPages() ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetPatternPage(PatternCurrentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                        
                        <div class="text-center">
                            <small class="text-muted">
                                Showing @((PatternCurrentPage - 1) * PatternPageSize + 1) to @Math.Min(PatternCurrentPage * PatternPageSize, GetFilteredPatterns().Count()) 
                                of @GetFilteredPatterns().Count() patterns
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Value Changes Modal -->
@if (ShowValueChangesModalFlag)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Common Value Changes</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowValueChangesModalFlag = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search value changes..." 
                                       @bind="ValueChangeSearchText" @oninput="FilterValueChanges" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="ValueChangeSortBy" @bind:after="SortValueChanges">
                                <option value="files">Sort by Files Affected</option>
                                <option value="property">Sort by Property Name</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="ValueChangePageSize" @bind:after="UpdateValueChangePageSize">
                                <option value="5">5 per page</option>
                                <option value="10">10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                            </select>
                        </div>
                    </div>

                    <div class="accordion" id="valueChangesModalAccordion">
                        @{
                            var pagedChanges = GetPagedValueChanges();
                            int modalIndex = 0;
                        }
                        @foreach (var change in pagedChanges)
                        {
                            var currentIndex = modalIndex++;
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="modal-heading-@currentIndex">
                                    <button class="accordion-button collapsed" type="button"
                                            data-bs-toggle="collapse" data-bs-target="#modal-collapse-@currentIndex">
                                        <code>@change.PropertyName</code>
                                        <span class="ms-2 badge bg-info">@change.AffectedFiles.Count files</span>
                                    </button>
                                </h2>
                                <div id="modal-collapse-@currentIndex" class="accordion-collapse collapse"
                                     data-bs-parent="#valueChangesModalAccordion">
                                    <div class="accordion-body">
                                        @foreach (var valueChange in change.CommonChanges)
                                        {
                                            <div class="mb-2">
                                                <div class="text-danger"><strong>From:</strong> @TruncateValue(valueChange.Key, 100)</div>
                                                <div class="text-success"><strong>To:</strong> @TruncateValue(valueChange.Value, 100)</div>
                                            </div>
                                        }

                                        <div class="mt-2">
                                            <strong>Affected files:</strong>
                                            <ul class="mb-0">
                                                @foreach (var file in change.AffectedFiles)
                                                {
                                                    <li><small>@file</small></li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Value Changes Pagination -->
                    @if (GetFilteredValueChanges().Count() > ValueChangePageSize)
                    {
                        <nav class="mt-3">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(ValueChangeCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetValueChangePage(ValueChangeCurrentPage - 1)">Previous</button>
                                </li>
                                
                                @for (int pageNum = Math.Max(1, ValueChangeCurrentPage - 2); pageNum <= Math.Min(GetValueChangeTotalPages(), ValueChangeCurrentPage + 2); pageNum++)
                                {
                                    <li class="page-item @(pageNum == ValueChangeCurrentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => SetValueChangePage(pageNum)">@pageNum</button>
                                    </li>
                                }
                                
                                <li class="page-item @(ValueChangeCurrentPage == GetValueChangeTotalPages() ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetValueChangePage(ValueChangeCurrentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                        
                        <div class="text-center">
                            <small class="text-muted">
                                Showing @((ValueChangeCurrentPage - 1) * ValueChangePageSize + 1) to @Math.Min(ValueChangeCurrentPage * ValueChangePageSize, GetFilteredValueChanges().Count()) 
                                of @GetFilteredValueChanges().Count() value changes
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public ComparisonPatternAnalysis Analysis { get; set; }

    [Parameter]
    public EventCallback<string> OnExportAnalysis { get; set; }

    // Modal state
    private bool ShowPatternModalFlag = false;
    private bool ShowValueChangesModalFlag = false;

    // Pattern list state
    private string PatternSearchText = "";
    private string PatternSortBy = "files";
    private int PatternPageSize = 25;
    private int PatternCurrentPage = 1;

    // Value changes state
    private string ValueChangeSearchText = "";
    private string ValueChangeSortBy = "files";
    private int ValueChangePageSize = 10;
    private int ValueChangeCurrentPage = 1;

    // Filtered and cached data
    private IEnumerable<GlobalPatternInfo> filteredPatterns;
    private IEnumerable<GlobalPropertyChangeInfo> filteredValueChanges;

    protected override void OnInitialized()
    {
        ResetFilters();
    }

    private void ResetFilters()
    {
        filteredPatterns = null;
        filteredValueChanges = null;
    }

    // Pattern Modal Methods
    private void ShowPatternModal()
    {
        ShowPatternModalFlag = true;
        PatternCurrentPage = 1;
        ResetFilters();
    }

    private void ShowValueChangesModal()
    {
        ShowValueChangesModalFlag = true;
        ValueChangeCurrentPage = 1;
        ResetFilters();
    }

    // Pattern Filtering and Sorting
    private IEnumerable<GlobalPatternInfo> GetFilteredPatterns()
    {
        if (filteredPatterns == null)
        {
            var patterns = Analysis.CommonPathPatterns.AsEnumerable();

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(PatternSearchText))
            {
                patterns = patterns.Where(p => p.PatternPath.Contains(PatternSearchText, StringComparison.OrdinalIgnoreCase));
            }

            // Apply sorting
            patterns = PatternSortBy switch
            {
                "files" => patterns.OrderByDescending(p => p.FileCount),
                "occurrences" => patterns.OrderByDescending(p => p.OccurrenceCount),
                "path" => patterns.OrderBy(p => p.PatternPath),
                _ => patterns.OrderByDescending(p => p.FileCount)
            };

            filteredPatterns = patterns;
        }

        return filteredPatterns;
    }

    private IEnumerable<GlobalPatternInfo> GetPagedPatterns()
    {
        var filtered = GetFilteredPatterns();
        return filtered.Skip((PatternCurrentPage - 1) * PatternPageSize).Take(PatternPageSize);
    }

    private int GetPatternTotalPages()
    {
        return (int)Math.Ceiling((double)GetFilteredPatterns().Count() / PatternPageSize);
    }

    private void SetPatternPage(int page)
    {
        if (page >= 1 && page <= GetPatternTotalPages())
        {
            PatternCurrentPage = page;
        }
    }

    private void FilterPatterns()
    {
        filteredPatterns = null;
        PatternCurrentPage = 1;
        StateHasChanged();
    }

    private void SortPatterns()
    {
        filteredPatterns = null;
        PatternCurrentPage = 1;
        StateHasChanged();
    }

    private void UpdatePatternPageSize()
    {
        PatternCurrentPage = 1;
        StateHasChanged();
    }

    // Value Changes Filtering and Sorting
    private IEnumerable<GlobalPropertyChangeInfo> GetFilteredValueChanges()
    {
        if (filteredValueChanges == null)
        {
            var changes = Analysis.CommonPropertyChanges.AsEnumerable();

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(ValueChangeSearchText))
            {
                changes = changes.Where(c => c.PropertyName.Contains(ValueChangeSearchText, StringComparison.OrdinalIgnoreCase));
            }

            // Apply sorting
            changes = ValueChangeSortBy switch
            {
                "files" => changes.OrderByDescending(c => c.AffectedFiles.Count),
                "property" => changes.OrderBy(c => c.PropertyName),
                _ => changes.OrderByDescending(c => c.AffectedFiles.Count)
            };

            filteredValueChanges = changes;
        }

        return filteredValueChanges;
    }

    private IEnumerable<GlobalPropertyChangeInfo> GetPagedValueChanges()
    {
        var filtered = GetFilteredValueChanges();
        return filtered.Skip((ValueChangeCurrentPage - 1) * ValueChangePageSize).Take(ValueChangePageSize);
    }

    private int GetValueChangeTotalPages()
    {
        return (int)Math.Ceiling((double)GetFilteredValueChanges().Count() / ValueChangePageSize);
    }

    private void SetValueChangePage(int page)
    {
        if (page >= 1 && page <= GetValueChangeTotalPages())
        {
            ValueChangeCurrentPage = page;
        }
    }

    private void FilterValueChanges()
    {
        filteredValueChanges = null;
        ValueChangeCurrentPage = 1;
        StateHasChanged();
    }

    private void SortValueChanges()
    {
        filteredValueChanges = null;
        ValueChangeCurrentPage = 1;
        StateHasChanged();
    }

    private void UpdateValueChangePageSize()
    {
        ValueChangeCurrentPage = 1;
        StateHasChanged();
    }

    // Export and Utility Methods
    private async Task ExportPatternAnalysis()
    {
        if (Analysis != null)
        {
            await OnExportAnalysis.InvokeAsync("pattern-analysis-report.md");
        }
    }

    private string FormatCategoryName(DifferenceCategory category)
    {
        switch (category)
        {
            case DifferenceCategory.TextContentChanged:
                return "Text Content";
            case DifferenceCategory.NumericValueChanged:
                return "Numeric Value";
            case DifferenceCategory.DateTimeChanged:
                return "Date/Time";
            case DifferenceCategory.BooleanValueChanged:
                return "Boolean Value";
            case DifferenceCategory.CollectionItemChanged:
                return "Collection Item";
            case DifferenceCategory.ItemAdded:
                return "Item Added";
            case DifferenceCategory.ItemRemoved:
                return "Item Removed";
            case DifferenceCategory.NullValueChange:
                return "Null Value";
            case DifferenceCategory.ValueChanged:
                return "Value Changed";
            case DifferenceCategory.GeneralValueChanged:
                return "General Value Changed";
            default:
                return "Other";
        }
    }

    private string TruncateValue(string value, int maxLength)
    {
        if (string.IsNullOrEmpty(value)) return "null";
        return value.Length <= maxLength ? value : value.Substring(0, maxLength - 3) + "...";
    }
}