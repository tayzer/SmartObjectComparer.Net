@page "/"
@rendermode InteractiveServer
@using System.IO
@using ComparisonTool.Core.Comparison
@using ComparisonTool.Core.Comparison.Analysis
@using ComparisonTool.Core.Comparison.Configuration
@using ComparisonTool.Core.Comparison.Results
@using ComparisonTool.Core.Serialization
@using ComparisonTool.Core.Utilities
@using ComparisonTool.Web.Services
@using KellermanSoftware.CompareNetObjects
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@implements IDisposable
@inject IXmlDeserializationService DeserializationService
@inject IComparisonConfigurationService ConfigService
@inject IComparisonService ComparisonService
@inject IFileSystemService FileSystemService
@inject DirectoryComparisonService DirectoryComparisonService
@inject IFileUtilities FileUtilities
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@inject PerformanceTracker PerformanceTracker
@inject SystemResourceMonitor ResourceMonitor
@inject ComparisonResultCacheService CacheService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>File Comparison Tool (XML & JSON)</h1>
    <div class="text-end">
        <small class="text-muted">Cache: @GetCacheStatsDisplay()</small>
        <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="ClearCache" title="Clear all caches">
            <i class="bi bi-trash3"></i> Clear Cache
        </button>
    </div>
</div>

<div class="mb-4">
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="useDirectModeSwitch" @bind="UseDirectoryMode" />
        <label class="form-check-label" for="useDirectModeSwitch">
            @(UseDirectoryMode ? "Directory Mode: Compare folders on server" : "Upload Mode: Compare uploaded files")
        </label>
    </div>
</div>

@if (UseDirectoryMode)
{
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Step 1: Select Folders to Compare</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label>Select Domain Model:</label>
                        <select class="form-control" @bind="SelectedModelName">
                            @foreach (var modelName in DeserializationService.GetRegisteredModelNames())
                            {
                                <option value="@modelName">@modelName</option>
                            }
                        </select>
                    </div>

                    <div class="form-group mt-3">
                        <label>A Directory:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="Directory1Path" placeholder="Enter path to first directory" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="BrowseDirectory1">
                                <i class="bi bi-folder"></i> Browse
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(Directory1Path) && Directory.Exists(Directory1Path))
                        {
                            <small class="text-success">Directory exists with @GetXmlFileCount(Directory1Path) XML files</small>
                        }
                        else if (!string.IsNullOrEmpty(Directory1Path))
                        {
                            <small class="text-danger">Directory does not exist</small>
                        }
                    </div>

                    <div class="form-group mt-3">
                        <label>B Directory:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="Directory2Path" placeholder="Enter path to second directory" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="BrowseDirectory2">
                                <i class="bi bi-folder"></i> Browse
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(Directory2Path) && Directory.Exists(Directory2Path))
                        {
                            <small class="text-success">Directory exists with @GetXmlFileCount(Directory2Path) XML files</small>
                        }
                        else if (!string.IsNullOrEmpty(Directory2Path))
                        {
                            <small class="text-danger">Directory does not exist</small>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <ComparisonConfigurationPanel IgnoreCollectionOrder="@IgnoreCollectionOrder"
                                          OnIgnoreCollectionOrderChanged="@(value => IgnoreCollectionOrder = value)"
                                          IgnoreStringCase="@IgnoreStringCase"
                                          OnIgnoreStringCaseChanged="@(value => IgnoreStringCase = value)"
                                          EnableSemanticAnalysis="@EnableSemanticAnalysis"
                                          OnEnableSemanticAnalysisChanged="@(value => EnableSemanticAnalysis = value)"
                                          EnableEnhancedStructuralAnalysis="@EnableEnhancedStructuralAnalysis"
                                          OnEnableEnhancedStructuralAnalysisChanged="@(value => EnableEnhancedStructuralAnalysis = value)"
                                          IgnoreRules="@IgnoreRules"
                                          OnIgnoreRuleAdded="@AddIgnoreRule"
                                          OnIgnoreRuleRemoved="@RemoveIgnoreRule"
                                          OnIgnoreRulesCleared="@ClearAllIgnoreRules"
                                          ModelType="@GetSelectedModelType()"
                                          OnPropertySelectorOpened="@OpenPropertySelector"
                                          OnTreePropertySelectorOpened="@OpenTreePropertySelector"
                                          OnRunComparison="@RunDirectoryComparison"
                                          CanRunComparison="@CanRunDirectoryComparison" />
        </div>
    </div>
}
else
{
    <div class="row mt-4">
        <div class="col-md-6">
            <FileSelector ModelNames="@DeserializationService.GetRegisteredModelNames()"
                          SelectedModelName="@SelectedModelName"
                          OnModelNameChanged="@(name => SelectedModelName = name)"
                          Folder1Files="@Folder1Files"
                          OnFolder1FilesChanged="@HandleFolder1FilesChanged"
                          Folder2Files="@Folder2Files"
                          OnFolder2FilesChanged="@HandleFolder2FilesChanged" />
        </div>

        <div class="col-md-6">
            <ComparisonConfigurationPanel IgnoreCollectionOrder="@IgnoreCollectionOrder"
                                          OnIgnoreCollectionOrderChanged="@(value => IgnoreCollectionOrder = value)"
                                          IgnoreStringCase="@IgnoreStringCase"
                                          OnIgnoreStringCaseChanged="@(value => IgnoreStringCase = value)"
                                          EnableSemanticAnalysis="@EnableSemanticAnalysis"
                                          OnEnableSemanticAnalysisChanged="@(value => EnableSemanticAnalysis = value)"
                                          EnableEnhancedStructuralAnalysis="@EnableEnhancedStructuralAnalysis"
                                          OnEnableEnhancedStructuralAnalysisChanged="@(value => EnableEnhancedStructuralAnalysis = value)"
                                          IgnoreRules="@IgnoreRules"
                                          OnIgnoreRuleAdded="@AddIgnoreRule"
                                          OnIgnoreRuleRemoved="@RemoveIgnoreRule"
                                          OnIgnoreRulesCleared="@ClearAllIgnoreRules"
                                          ModelType="@GetSelectedModelType()"
                                          OnPropertySelectorOpened="@OpenPropertySelector"
                                          OnTreePropertySelectorOpened="@OpenTreePropertySelector"
                                          OnRunComparison="@RunFolderComparison"
                                          CanRunComparison="@CanRunFolderComparison" />
        </div>
    </div>
}

@if (IsComparing)
{
    <div class="card mt-4">
        <div class="card-body">
            <div class="progress mb-3">
                <div class="progress-bar progress-bar-striped progress-bar-animated"
                     role="progressbar"
                     style="width: @(Progress.PercentComplete)%">
                    @Progress.Status
                </div>
            </div>
            <div class="text-center">
                <p>@Progress.Status (@Progress.Completed of @Progress.Total completed)</p>
                @if (IsCancellable)
                {
                    <button class="btn btn-sm btn-warning" @onclick="CancelComparison">
                        <i class="bi bi-x-circle me-1"></i> Cancel
                    </button>
                }
            </div>
        </div>
    </div>
}

@if (FolderComparisonResult != null)
{
    @if (EnableEnhancedStructuralAnalysis)
    {
        @if (EnhancedStructuralAnalysis != null)
        {
            <ComparisonRunDetails Analysis="@EnhancedStructuralAnalysis"
                                  FolderComparisonResult="@FolderComparisonResult" />
        }
        else if (!FolderComparisonResult.AllEqual)
        {
            <!-- Loading state for Enhanced Structural Analysis -->
            <div class="card">
                <div class="card-header">
                    <h4>Comparison Overview</h4>
                </div>
                <div class="card-body text-center py-5">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h5>Generating Enhanced Analysis...</h5>
                    <p class="text-muted">Please wait while we analyze structural patterns and categorize differences.</p>
                </div>
            </div>
        }
        else
        {
            <!-- All files are equal - show simple success message -->
            <div class="card">
                <div class="card-header">
                    <h4>Comparison Overview</h4>
                </div>
                <div class="card-body">
                    <div class="alert alert-success d-flex align-items-center">
                        <i class="bi bi-check-circle-fill me-3 fs-4"></i>
                        <div>
                            <strong>All files are identical</strong>
                            <div class="text-muted">
                                No differences found in any of the @FolderComparisonResult.FilePairResults.Count compared files.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <!-- Enhanced Structural Analysis is disabled - show traditional summary -->
        <EnhancedDifferenceSummary Summary="@DifferenceSummary" FolderResult="@FolderComparisonResult" />
    }
    
    <FileComparisonResults Result="@FolderComparisonResult"
                           SelectedPairIndex="@SelectedPairIndex"
                           OnPairSelected="@SelectPairResult"
                           OnExportAll="@ExportAllFolderResults" />
}

@if (FolderComparisonResult != null && SelectedPairIndex >= 0 && DifferenceSummary != null)
{
    <DetailedDifferencesView SelectedPair="@FolderComparisonResult.FilePairResults[SelectedPairIndex]"
                             DifferenceSummary="@DifferenceSummary"
                             ComparisonResult="@ComparisonResult"
                             ShowAllDifferences="@ShowAllDifferences"
                             OnToggleShowAll="@ToggleShowAllDifferences"
                             OnExportResults="@ExportFolderResults"
                             FolderResult="@FolderComparisonResult" />
}



@if (EnableEnhancedStructuralAnalysis && FolderComparisonResult != null && !FolderComparisonResult.AllEqual && EnhancedStructuralAnalysis == null)
{
    <div class="alert alert-info mt-3">
        <h5>Enhanced Structural Analysis</h5>
        <p>Enhanced structural analysis is enabled but no patterns were found or the analysis didn't run.</p>
        <button class="btn btn-success btn-sm" @onclick="GenerateEnhancedStructuralAnalysis">
            Run Enhanced Structural Analysis
        </button>
    </div>
}

@if (SemanticAnalysis != null && EnableSemanticAnalysis)
{
    <SemanticGroupsPanel Analysis="@SemanticAnalysis"
                         OnExportAnalysis="@ExportSemanticAnalysisReport" />
}

<HierarchicalPropertySelector @ref="propertySelector"
                              ModelType="@GetSelectedModelType()"
                              IgnoredProperties="IgnoreRules"
                              OnPropertyAdded="AddIgnoreRule"
                              OnPropertiesBatchAdded="AddIgnoreRulesBatch"
                              OnPropertyRemoved="propertyPath => RemoveIgnoreRule(IgnoreRules.FirstOrDefault(r => r.PropertyPath == propertyPath))" />

<ObjectTreePropertySelector @ref="treePropertySelector"
                           ModelType="@GetSelectedModelType()"
                           IgnoredProperties="IgnoreRules"
                           OnPropertyAdded="AddIgnoreRule"
                           OnPropertiesBatchAdded="AddIgnoreRulesBatch"
                           OnPropertyRemoved="propertyPath => RemoveIgnoreRule(IgnoreRules.FirstOrDefault(r => r.PropertyPath == propertyPath))" />

@code {
    // Configuration properties
    private string SelectedModelName { get; set; }
    private bool IgnoreCollectionOrder { get; set; } = false;
    private bool IgnoreStringCase { get; set; } = false;
    private List<IgnoreRule> IgnoreRules { get; set; } = new List<IgnoreRule>();
    private bool EnableSemanticAnalysis { get; set; } = true;
    private bool EnableEnhancedStructuralAnalysis { get; set; } = true;
    private bool UseDirectoryMode { get; set; } = false;
    
    // Directory mode properties
    private string Directory1Path { get; set; }
    private string Directory2Path { get; set; }
    
    // File upload mode properties
    private List<string> Folder1Files { get; set; } = new();
    private List<string> Folder2Files { get; set; } = new();
    
    // Comparison state
    private bool IsComparing { get; set; } = false;
    private ComparisonProgress Progress { get; set; } = new ComparisonProgress(0, 0, "Ready");
    private bool IsCancellable { get; set; } = true;
    private ComparisonResult ComparisonResult { get; set; }
    private DifferenceSummary DifferenceSummary { get; set; }
    private bool ShowAllDifferences { get; set; } = false;
    private MultiFolderComparisonResult FolderComparisonResult { get; set; }
    private int SelectedPairIndex { get; set; } = -1;
    private SemanticDifferenceAnalysis SemanticAnalysis { get; set; }
    private EnhancedStructuralDifferenceAnalyzer.EnhancedStructuralAnalysisResult EnhancedStructuralAnalysis { get; set; }
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    private HierarchicalPropertySelector propertySelector;
    private ObjectTreePropertySelector treePropertySelector;

    private bool CanRunFolderComparison =>
        !string.IsNullOrEmpty(SelectedModelName) &&
        Folder1Files.Count > 0 &&
        Folder2Files.Count > 0;
        
    private bool CanRunDirectoryComparison =>
        !string.IsNullOrEmpty(SelectedModelName) &&
        !string.IsNullOrEmpty(Directory1Path) &&
        !string.IsNullOrEmpty(Directory2Path) &&
        Directory.Exists(Directory1Path) &&
        Directory.Exists(Directory2Path);

    protected override void OnInitialized()
    {
        try
        {
            SelectedModelName = DeserializationService.GetRegisteredModelNames().FirstOrDefault();

            IgnoreCollectionOrder = ConfigService.GetIgnoreCollectionOrder();
            IgnoreStringCase = ConfigService.GetIgnoreStringCase();

            foreach (var prop in ConfigService.GetIgnoredProperties())
            {
                IgnoreRules.Add(new IgnoreRule
                    {
                        PropertyPath = prop,
                        IgnoreCompletely = true
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing component");
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }

    private Type GetSelectedModelType()
    {
        if (string.IsNullOrEmpty(SelectedModelName))
            return null;

        try
        {
            return DeserializationService.GetModelType(SelectedModelName);
        }
        catch
        {
            return null;
        }
    }
    
    private int GetXmlFileCount(string directoryPath)
    {
        if (string.IsNullOrEmpty(directoryPath) || !Directory.Exists(directoryPath))
            return 0;
            
        try
        {
            return Directory.GetFiles(directoryPath, "*.xml", SearchOption.AllDirectories).Length;
        }
        catch
        {
            return 0;
        }
    }

    private void HandleFolder1FilesChanged(List<string> files)
    {
        Folder1Files = files;
    }

    private void HandleFolder2FilesChanged(List<string> files)
    {
        Folder2Files = files;
    }

    private async Task OpenPropertySelector()
    {
        await propertySelector.ShowAsync();
    }

    private async Task OpenTreePropertySelector()
    {
        await treePropertySelector.ShowAsync();
    }

    private void AddIgnoreRule(IgnoreRule rule)
    {
        var existingRule = IgnoreRules.FirstOrDefault(r => r.PropertyPath == rule.PropertyPath);
        if (existingRule != null)
        {
            IgnoreRules.Remove(existingRule);
        }

        IgnoreRules.Add(rule);

        if (rule.IgnoreCompletely)
        {
            ConfigService.IgnoreProperty(rule.PropertyPath);
        }
        else
        {
            ConfigService.AddIgnoreRule(rule);
        }
    }

    private void AddIgnoreRulesBatch(IEnumerable<IgnoreRule> rules)
    {
        if (rules == null || !rules.Any()) return;

        var rulesList = rules.ToList();

        // Remove existing rules and add new ones to local collection
        foreach (var rule in rulesList)
        {
            var existingRule = IgnoreRules.FirstOrDefault(r => r.PropertyPath == rule.PropertyPath);
            if (existingRule != null)
            {
                IgnoreRules.Remove(existingRule);
            }
            IgnoreRules.Add(rule);
        }

        // Use batch method for better performance
        ConfigService.AddIgnoreRulesBatch(rulesList);
    }

    private void RemoveIgnoreRule(IgnoreRule rule)
    {
        if (rule == null) return;

        IgnoreRules.Remove(rule);

        // Also remove from the service
        if (rule.IgnoreCompletely)
        {
            ConfigService.RemoveIgnoredProperty(rule.PropertyPath);
        }
    }

    private void ClearAllIgnoreRules()
    {
        IgnoreRules.Clear();
        ConfigService.ClearIgnoreRules();
    }
    
    private async Task BrowseDirectory1()
    {
                    var result = await JSRuntime.InvokeAsync<string>("browseFolder", "Select A Directory");
        if (!string.IsNullOrEmpty(result))
        {
            Directory1Path = result;
            StateHasChanged();
        }
    }
    
    private async Task BrowseDirectory2()
    {
                    var result = await JSRuntime.InvokeAsync<string>("browseFolder", "Select B Directory");
        if (!string.IsNullOrEmpty(result))
        {
            Directory2Path = result;
            StateHasChanged();
        }
    }
    
    private async Task RunDirectoryComparison()
    {
        if (!CanRunDirectoryComparison)
            return;
            
        try
        {
            await ClearAndReset();
            
            IsComparing = true;
            IsCancellable = true;
            Progress = new ComparisonProgress(0, 0, "Preparing comparison...");

            await ResetCancellationToken();
            var cancellationToken = _cancellationTokenSource.Token;

            ConfigService.SetIgnoreCollectionOrder(IgnoreCollectionOrder);
            ConfigService.SetIgnoreStringCase(IgnoreStringCase);

            foreach (var rule in IgnoreRules)
            {
                ConfigService.AddIgnoreRule(rule);
            }

            ConfigService.ApplyConfiguredSettings();
            
            // Create progress reporter
            var progressReporter = new Progress<ComparisonProgress>(progress =>
            {
                Progress = progress;
                StateHasChanged();
            });
            
            // Run the comparison
            FolderComparisonResult = await DirectoryComparisonService.CompareDirectoriesAsync(
                Directory1Path,
                Directory2Path,
                SelectedModelName,
                false, // Pattern analysis removed
                EnableSemanticAnalysis,
                progressReporter,
                cancellationToken);
                
            // Select the first result if there are differences
            if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 0)
            {
                SelectPairResult(0);
            }
            
            // Get semantic analysis from metadata if available
            if (FolderComparisonResult.Metadata.TryGetValue("SemanticAnalysis", out var semanticAnalysisObj))
            {
                SemanticAnalysis = semanticAnalysisObj as SemanticDifferenceAnalysis;
            }
            
            // Generate enhanced structural analysis if enabled and there are differences
            if (EnableEnhancedStructuralAnalysis && !FolderComparisonResult.AllEqual)
            {
                Progress = new ComparisonProgress(0, 0, "Starting enhanced structural analysis...");
                StateHasChanged();
                await Task.Delay(100); // Ensure UI updates
                await GenerateEnhancedStructuralAnalysis();
            }
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Comparison operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error comparing directories: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error comparing directories: {ex.Message}");
        }
        finally
        {
            IsComparing = false;
            IsCancellable = false;
            StateHasChanged();
        }
    }

    private async Task RunFolderComparison()
    {
        if (!CanRunFolderComparison)
            return;

        try
        {
            await ClearAndReset();
            
            IsComparing = true;
            IsCancellable = true;
            Progress = new ComparisonProgress(0, 0, "Preparing comparison...");

            await ResetCancellationToken();
            var cancellationToken = _cancellationTokenSource.Token;

            ConfigService.SetIgnoreCollectionOrder(IgnoreCollectionOrder);
            ConfigService.SetIgnoreStringCase(IgnoreStringCase);

            foreach (var rule in IgnoreRules)
            {
                ConfigService.AddIgnoreRule(rule);
            }

            ConfigService.ApplyConfiguredSettings();

            // Create progress reporter
            var progressReporter = new Progress<ComparisonProgress>(progress =>
            {
                Progress = progress;
                StateHasChanged();
            });

            // Use folder uploads method
            if (Folder1Files.Count > 500 || Folder2Files.Count > 500)
            {
                FolderComparisonResult = await DirectoryComparisonService.CompareFolderUploadsAsync(
                    Folder1Files,
                    Folder2Files,
                    SelectedModelName,
                    false, // Pattern analysis removed
                    EnableSemanticAnalysis,
                    progressReporter,
                    cancellationToken);
                    
                // Get semantic analysis from metadata if available
                if (FolderComparisonResult.Metadata.TryGetValue("SemanticAnalysis", out var semanticAnalysisObj))
                {
                    SemanticAnalysis = semanticAnalysisObj as SemanticDifferenceAnalysis;
                }
                
                // Select the first result if there are differences
                if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 0)
                {
                    SelectPairResult(0);
                }
                
                // Generate enhanced structural analysis if enabled
                if (EnableEnhancedStructuralAnalysis && !FolderComparisonResult.AllEqual)
                {
                    Progress = new ComparisonProgress(0, 0, "Starting enhanced structural analysis...");
                    StateHasChanged();
                    await Task.Delay(100); // Ensure UI updates
                    await GenerateEnhancedStructuralAnalysis();
                }
            }
            else
            {
                // Create a simple progress reporter for the batch method
                var batchProgressReporter = new Progress<(int Completed, int Total)>(progress =>
                {
                    Progress = new ComparisonProgress(progress.Completed, progress.Total, $"Compared {progress.Completed} of {progress.Total} files");
                    StateHasChanged();
                });

                // Use batch comparison service with caching for smaller sets
                FolderComparisonResult = await ComparisonService.CompareFoldersInBatchesAsync(
                    Folder1Files,
                    Folder2Files,
                    SelectedModelName,
                    batchSize: 25,
                    batchProgressReporter,
                    cancellationToken);

                // Select the first result if there are differences
                if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 0)
                {
                    SelectPairResult(0);
                }

                // Generate semantic analysis if needed
                if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 1 && EnableSemanticAnalysis)
                {
                    await GenerateSemanticAnalysis();
                }
                
                // Generate enhanced structural analysis if enabled
                if (EnableEnhancedStructuralAnalysis && !FolderComparisonResult.AllEqual)
                {
                    Progress = new ComparisonProgress(0, 0, "Starting enhanced structural analysis...");
                    StateHasChanged();
                    await Task.Delay(100); // Ensure UI updates
                    await GenerateEnhancedStructuralAnalysis();
                }
            }
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Comparison operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error comparing files: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error comparing files: {ex.Message}");
        }
        finally
        {
            IsComparing = false;
            IsCancellable = false;
            StateHasChanged();
        }
    }
    
    private async Task ResetCancellationToken()
    {
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
        _cancellationTokenSource = new CancellationTokenSource();
    }
    
    private async Task CancelComparison()
    {
        if (IsCancellable)
        {
            await _cancellationTokenSource.CancelAsync();
            IsCancellable = false;
        }
    }

    private async Task SelectPairResult(int index)
    {
        if (FolderComparisonResult == null || index < 0 || index >= FolderComparisonResult.FilePairResults.Count)
            return;
            
        SelectedPairIndex = index;

        var selectedPair = FolderComparisonResult.FilePairResults[index];
        ComparisonResult = selectedPair.Result;
        DifferenceSummary = selectedPair.Summary;
        
        // Scroll to the detailed differences section after selection
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", "detailed-differences-section");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to scroll to detailed differences section.");
        }
        
        StateHasChanged(); // Ensure UI updates with selection
    }

    private void ToggleShowAllDifferences()
    {
        ShowAllDifferences = !ShowAllDifferences;
    }



    private async Task GenerateSemanticAnalysis()
    {
        if (FolderComparisonResult == null)
            return;

        try
        {
            var cancellationToken = _cancellationTokenSource.Token;

            // Generate semantic analysis directly without pattern analysis dependency
            SemanticAnalysis = await ComparisonService.AnalyzeSemanticDifferencesAsync(
                FolderComparisonResult,
                null, // No pattern analysis needed
                cancellationToken);
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Semantic analysis operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating semantic analysis: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error generating semantic analysis: {ex.Message}");
        }
    }



    private async Task GenerateEnhancedStructuralAnalysis()
    {
        if (FolderComparisonResult == null)
            return;
        
        try
        {
            Logger.LogInformation("Starting enhanced structural pattern analysis...");
            Progress = new ComparisonProgress(0, 0, "Generating enhanced structural pattern analysis...");
            StateHasChanged();
            
            await Task.Delay(100); // Allow UI to update
            
            var enhancedStructuralAnalyzer = new EnhancedStructuralDifferenceAnalyzer(FolderComparisonResult, Logger);
            EnhancedStructuralAnalysis = enhancedStructuralAnalyzer.AnalyzeStructuralPatterns();
            
            Logger.LogInformation("Enhanced structural analysis completed. Found patterns: {Critical}, {MissingElements}, {MissingProps}, {ValueDiffs}, {GeneralDiffs}, {OrderDiffs}",
                EnhancedStructuralAnalysis?.CriticalMissingElements?.Count ?? 0,
                EnhancedStructuralAnalysis?.MissingCollectionElements?.Count ?? 0,
                EnhancedStructuralAnalysis?.ConsistentlyMissingProperties?.Count ?? 0,
                EnhancedStructuralAnalysis?.ConsistentValueDifferences?.Count ?? 0,
                EnhancedStructuralAnalysis?.GeneralValueDifferences?.Count ?? 0,
                EnhancedStructuralAnalysis?.ElementOrderDifferences?.Count ?? 0);
            
            // Add to metadata to save with results
            if (FolderComparisonResult.Metadata.ContainsKey("EnhancedStructuralAnalysis"))
                FolderComparisonResult.Metadata["EnhancedStructuralAnalysis"] = EnhancedStructuralAnalysis;
            else
                FolderComparisonResult.Metadata.Add("EnhancedStructuralAnalysis", EnhancedStructuralAnalysis);
            
            Progress = new ComparisonProgress(0, 0, "Enhanced structural analysis complete");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating enhanced structural pattern analysis");
            Progress = new ComparisonProgress(0, 0, "Error generating enhanced structural analysis");
            StateHasChanged();
        }
    }

    private async Task ExportFolderResults()
    {
        if (FolderComparisonResult == null || SelectedPairIndex < 0)
            return;

        try
        {
            var selectedPair = FolderComparisonResult.FilePairResults[SelectedPairIndex];
            var file1Name = Path.GetFileNameWithoutExtension(selectedPair.File1Name);
            var file2Name = Path.GetFileNameWithoutExtension(selectedPair.File2Name);

            var headerInfo = $"# Comparison Report\n\n" +
                                          $"A file: **{selectedPair.File1Name}**\n\n" +
                $"B file: **{selectedPair.File2Name}**\n\n" +
                          $"---\n\n";

            var report = FileUtilities.GenerateReportMarkdown(selectedPair.Summary, headerInfo);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                $"comparison-{file1Name}-vs-{file2Name}.md",
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting folder results: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting results: {ex.Message}");
        }
    }

    private async Task ExportAllFolderResults()
    {
        if (FolderComparisonResult == null || FolderComparisonResult.FilePairResults.Count == 0)
            return;

        try
        {
            string report = FileUtilities.GenerateFolderComparisonReport(FolderComparisonResult);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                "folder-comparison-report.md",
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting all folder results: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting results: {ex.Message}");
        }
    }



    private async Task ExportSemanticAnalysisReport(string filename)
    {
        if (SemanticAnalysis == null)
            return;

        try
        {
            var report = FileUtilities.GenerateSemanticAnalysisReport(SemanticAnalysis);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting semantic analysis: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting semantic analysis: {ex.Message}");
        }
    }

    private async Task ClearAndReset()
    {
        try
        {
            // Reset all comparison results
            ComparisonResult = null;
            DifferenceSummary = null;
            FolderComparisonResult = null;
            SelectedPairIndex = -1;
            SemanticAnalysis = null;
            EnhancedStructuralAnalysis = null;
            ShowAllDifferences = false;
            
            // Force garbage collection to clean up memory
            GC.Collect();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing comparison results");
        }
    }

    private string GetCacheStatsDisplay()
    {
        try
        {
            var stats = CacheService.GetCacheStatistics();
            if (stats.Hits + stats.Misses == 0)
                return "No activity";
            
            var hitRatio = stats.HitRatio * 100;
            var memoryMB = stats.EstimatedMemory / (1024 * 1024);
            
            return $"{hitRatio:F0}% hit ratio, {stats.ComparisonEntries + stats.ObjectEntries} entries, {memoryMB}MB";
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error getting cache statistics");
            return "Cache error";
        }
    }

    private async Task ClearCache()
    {
        try
        {
            // Clear all caches
            CacheService.ClearAllCaches();
            
            // Also clear the internal XML deserialization cache
            if (DeserializationService is XmlDeserializationService xmlService)
            {
                xmlService.ClearDeserializationCache();
            }
            
            Logger.LogInformation("All caches cleared by user - both object cache and XML deserialization cache");
            await JSRuntime.InvokeVoidAsync("alert", "All caches cleared successfully! Both object cache and XML deserialization cache have been reset.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing cache");
            await JSRuntime.InvokeVoidAsync("alert", $"Error clearing cache: {ex.Message}");
        }
    }
}