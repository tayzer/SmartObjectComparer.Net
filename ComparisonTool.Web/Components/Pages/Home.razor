@page "/"
@rendermode InteractiveServer
@using System.IO
@using ComparisonTool.Core.Comparison
@using ComparisonTool.Core.Comparison.Analysis
@using ComparisonTool.Core.Comparison.Configuration
@using ComparisonTool.Core.Comparison.Results
@using ComparisonTool.Core.Serialization
@using ComparisonTool.Core.Utilities
@using ComparisonTool.Web.Services
@using KellermanSoftware.CompareNetObjects
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@implements IDisposable
@inject IXmlDeserializationService DeserializationService
@inject IComparisonConfigurationService ConfigService
@inject IComparisonService ComparisonService
@inject IFileSystemService FileSystemService
@inject DirectoryComparisonService DirectoryComparisonService
@inject IFileUtilities FileUtilities
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@inject PerformanceTracker PerformanceTracker
@inject SystemResourceMonitor ResourceMonitor

<h1>XML Comparison Tool</h1>

<div class="mb-4">
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="useDirectModeSwitch" @bind="UseDirectoryMode" />
        <label class="form-check-label" for="useDirectModeSwitch">
            @(UseDirectoryMode ? "Directory Mode: Compare folders on server" : "Upload Mode: Compare uploaded files")
        </label>
    </div>
</div>

@if (UseDirectoryMode)
{
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Step 1: Select Folders to Compare</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label>Select Domain Model:</label>
                        <select class="form-control" @bind="SelectedModelName">
                            @foreach (var modelName in DeserializationService.GetRegisteredModelNames())
                            {
                                <option value="@modelName">@modelName</option>
                            }
                        </select>
                    </div>

                    <div class="form-group mt-3">
                        <label>V1 Directory:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="Directory1Path" placeholder="Enter path to first directory" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="BrowseDirectory1">
                                <i class="bi bi-folder"></i> Browse
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(Directory1Path) && Directory.Exists(Directory1Path))
                        {
                            <small class="text-success">Directory exists with @GetXmlFileCount(Directory1Path) XML files</small>
                        }
                        else if (!string.IsNullOrEmpty(Directory1Path))
                        {
                            <small class="text-danger">Directory does not exist</small>
                        }
                    </div>

                    <div class="form-group mt-3">
                        <label>V2 Directory:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="Directory2Path" placeholder="Enter path to second directory" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="BrowseDirectory2">
                                <i class="bi bi-folder"></i> Browse
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(Directory2Path) && Directory.Exists(Directory2Path))
                        {
                            <small class="text-success">Directory exists with @GetXmlFileCount(Directory2Path) XML files</small>
                        }
                        else if (!string.IsNullOrEmpty(Directory2Path))
                        {
                            <small class="text-danger">Directory does not exist</small>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <ComparisonConfigurationPanel IgnoreCollectionOrder="@IgnoreCollectionOrder"
                                          OnIgnoreCollectionOrderChanged="@(value => IgnoreCollectionOrder = value)"
                                          IgnoreStringCase="@IgnoreStringCase"
                                          OnIgnoreStringCaseChanged="@(value => IgnoreStringCase = value)"
                                          EnablePatternAnalysis="@EnablePatternAnalysis"
                                          OnEnablePatternAnalysisChanged="@(value => EnablePatternAnalysis = value)"
                                          EnableSemanticAnalysis="@EnableSemanticAnalysis"
                                          OnEnableSemanticAnalysisChanged="@(value => EnableSemanticAnalysis = value)"
                                          EnableStructuralAnalysis="@EnableStructuralAnalysis"
                                          OnEnableStructuralAnalysisChanged="@(value => EnableStructuralAnalysis = value)"
                                          EnableEnhancedStructuralAnalysis="@EnableEnhancedStructuralAnalysis"
                                          OnEnableEnhancedStructuralAnalysisChanged="@(value => EnableEnhancedStructuralAnalysis = value)"
                                          IgnoreRules="@IgnoreRules"
                                          OnIgnoreRuleAdded="@AddIgnoreRule"
                                          OnIgnoreRuleRemoved="@RemoveIgnoreRule"
                                          ModelType="@GetSelectedModelType()"
                                          OnPropertySelectorOpened="@OpenPropertySelector"
                                          OnRunComparison="@RunDirectoryComparison"
                                          CanRunComparison="@CanRunDirectoryComparison" />
        </div>
    </div>
}
else
{
    <div class="row mt-4">
        <div class="col-md-6">
            <FileSelector ModelNames="@DeserializationService.GetRegisteredModelNames()"
                          SelectedModelName="@SelectedModelName"
                          OnModelNameChanged="@(name => SelectedModelName = name)"
                          Folder1Files="@Folder1Files"
                          OnFolder1FilesChanged="@HandleFolder1FilesChanged"
                          Folder2Files="@Folder2Files"
                          OnFolder2FilesChanged="@HandleFolder2FilesChanged" />
        </div>

        <div class="col-md-6">
            <ComparisonConfigurationPanel IgnoreCollectionOrder="@IgnoreCollectionOrder"
                                          OnIgnoreCollectionOrderChanged="@(value => IgnoreCollectionOrder = value)"
                                          IgnoreStringCase="@IgnoreStringCase"
                                          OnIgnoreStringCaseChanged="@(value => IgnoreStringCase = value)"
                                          EnablePatternAnalysis="@EnablePatternAnalysis"
                                          OnEnablePatternAnalysisChanged="@(value => EnablePatternAnalysis = value)"
                                          EnableSemanticAnalysis="@EnableSemanticAnalysis"
                                          OnEnableSemanticAnalysisChanged="@(value => EnableSemanticAnalysis = value)"
                                          EnableStructuralAnalysis="@EnableStructuralAnalysis"
                                          OnEnableStructuralAnalysisChanged="@(value => EnableStructuralAnalysis = value)"
                                          EnableEnhancedStructuralAnalysis="@EnableEnhancedStructuralAnalysis"
                                          OnEnableEnhancedStructuralAnalysisChanged="@(value => EnableEnhancedStructuralAnalysis = value)"
                                          IgnoreRules="@IgnoreRules"
                                          OnIgnoreRuleAdded="@AddIgnoreRule"
                                          OnIgnoreRuleRemoved="@RemoveIgnoreRule"
                                          ModelType="@GetSelectedModelType()"
                                          OnPropertySelectorOpened="@OpenPropertySelector"
                                          OnRunComparison="@RunFolderComparison"
                                          CanRunComparison="@CanRunFolderComparison" />
        </div>
    </div>
}

@if (IsComparing)
{
    <div class="card mt-4">
        <div class="card-body">
            <div class="progress mb-3">
                <div class="progress-bar progress-bar-striped progress-bar-animated"
                     role="progressbar"
                     style="width: @(Progress.PercentComplete)%">
                    @Progress.Status
                </div>
            </div>
            <div class="text-center">
                <p>@Progress.Status (@Progress.Completed of @Progress.Total completed)</p>
                @if (IsCancellable)
                {
                    <button class="btn btn-sm btn-warning" @onclick="CancelComparison">
                        <i class="bi bi-x-circle me-1"></i> Cancel
                    </button>
                }
            </div>
        </div>
    </div>
}

@if (FolderComparisonResult != null)
{
    <FileComparisonResults Result="@FolderComparisonResult"
                           SelectedPairIndex="@SelectedPairIndex"
                           OnPairSelected="@SelectPairResult"
                           OnExportAll="@ExportAllFolderResults" />
}

@if (FolderComparisonResult != null && SelectedPairIndex >= 0 && DifferenceSummary != null)
{
    <DetailedDifferencesView SelectedPair="@FolderComparisonResult.FilePairResults[SelectedPairIndex]"
                             DifferenceSummary="@DifferenceSummary"
                             ComparisonResult="@ComparisonResult"
                             ShowAllDifferences="@ShowAllDifferences"
                             OnToggleShowAll="@ToggleShowAllDifferences"
                             OnExportResults="@ExportFolderResults" />
}

@if (PatternAnalysis != null && (ShowPatternSummary || EnablePatternAnalysis))
{
    <PatternAnalysisPanel Analysis="@PatternAnalysis"
                          ShowSummary="@ShowPatternSummary"
                          OnToggleSummary="@(() => ShowPatternSummary = !ShowPatternSummary)"
                          OnExportAnalysis="@ExportPatternAnalysisReport" />
}

@if (StructuralAnalysis != null && EnableStructuralAnalysis)
{
    <StructuralPatternPanel Analysis="@StructuralAnalysis" />
}
else if (EnableStructuralAnalysis && FolderComparisonResult != null && !FolderComparisonResult.AllEqual)
{
    <div class="alert alert-info mt-3">
        <h5>Structural Analysis</h5>
        <p>Structural analysis is enabled but no patterns were found or the analysis didn't run.</p>
        <button class="btn btn-primary btn-sm" @onclick="GenerateStructuralAnalysis">
            Run Structural Analysis
        </button>
    </div>
}

@if (EnhancedStructuralAnalysis != null && EnableEnhancedStructuralAnalysis)
{
    <EnhancedStructuralPatternPanel Analysis="@EnhancedStructuralAnalysis" />
}
else if (EnableEnhancedStructuralAnalysis && FolderComparisonResult != null && !FolderComparisonResult.AllEqual)
{
    <div class="alert alert-info mt-3">
        <h5>Enhanced Structural Analysis</h5>
        <p>Enhanced structural analysis is enabled but no patterns were found or the analysis didn't run.</p>
        <button class="btn btn-success btn-sm" @onclick="GenerateEnhancedStructuralAnalysis">
            Run Enhanced Structural Analysis
        </button>
    </div>
}

@if (SemanticAnalysis != null && (ShowPatternSummary || EnablePatternAnalysis))
{
    <SemanticGroupsPanel Analysis="@SemanticAnalysis"
                         OnExportAnalysis="@ExportSemanticAnalysisReport" />
}

<HierarchicalPropertySelector @ref="propertySelector"
                              ModelType="@GetSelectedModelType()"
                              IgnoredProperties="IgnoreRules"
                              OnPropertyAdded="AddIgnoreRule"
                              OnPropertyRemoved="propertyPath => RemoveIgnoreRule(IgnoreRules.FirstOrDefault(r => r.PropertyPath == propertyPath))" />

@code {
    // Configuration properties
    private string SelectedModelName { get; set; }
    private bool IgnoreCollectionOrder { get; set; } = false;
    private bool IgnoreStringCase { get; set; } = false;
    private List<IgnoreRule> IgnoreRules { get; set; } = new List<IgnoreRule>();
    private bool EnablePatternAnalysis { get; set; } = true;
    private bool EnableSemanticAnalysis { get; set; } = true;
    private bool EnableStructuralAnalysis { get; set; } = true;
    private bool EnableEnhancedStructuralAnalysis { get; set; } = true;
    private bool UseDirectoryMode { get; set; } = false;
    
    // Directory mode properties
    private string Directory1Path { get; set; }
    private string Directory2Path { get; set; }
    
    // File upload mode properties
    private List<string> Folder1Files { get; set; } = new();
    private List<string> Folder2Files { get; set; } = new();
    
    // Comparison state
    private bool IsComparing { get; set; } = false;
    private ComparisonProgress Progress { get; set; } = new ComparisonProgress(0, 0, "Ready");
    private bool IsCancellable { get; set; } = true;
    private ComparisonResult ComparisonResult { get; set; }
    private DifferenceSummary DifferenceSummary { get; set; }
    private bool ShowAllDifferences { get; set; } = false;
    private MultiFolderComparisonResult FolderComparisonResult { get; set; }
    private int SelectedPairIndex { get; set; } = -1;
    private ComparisonPatternAnalysis PatternAnalysis { get; set; }
    private bool ShowPatternSummary { get; set; } = false;
    private SemanticDifferenceAnalysis SemanticAnalysis { get; set; }
    private StructuralDifferenceAnalyzer.StructuralAnalysisResult StructuralAnalysis { get; set; }
    private EnhancedStructuralDifferenceAnalyzer.EnhancedStructuralAnalysisResult EnhancedStructuralAnalysis { get; set; }
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    private HierarchicalPropertySelector propertySelector;

    private bool CanRunFolderComparison =>
        !string.IsNullOrEmpty(SelectedModelName) &&
        Folder1Files.Count > 0 &&
        Folder2Files.Count > 0;
        
    private bool CanRunDirectoryComparison =>
        !string.IsNullOrEmpty(SelectedModelName) &&
        !string.IsNullOrEmpty(Directory1Path) &&
        !string.IsNullOrEmpty(Directory2Path) &&
        Directory.Exists(Directory1Path) &&
        Directory.Exists(Directory2Path);

    protected override void OnInitialized()
    {
        try
        {
            SelectedModelName = DeserializationService.GetRegisteredModelNames().FirstOrDefault();

            IgnoreCollectionOrder = ConfigService.GetIgnoreCollectionOrder();
            IgnoreStringCase = ConfigService.GetIgnoreStringCase();

            foreach (var prop in ConfigService.GetIgnoredProperties())
            {
                IgnoreRules.Add(new IgnoreRule
                    {
                        PropertyPath = prop,
                        IgnoreCompletely = true
                    });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing component");
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }

    private Type GetSelectedModelType()
    {
        if (string.IsNullOrEmpty(SelectedModelName))
            return null;

        try
        {
            return DeserializationService.GetModelType(SelectedModelName);
        }
        catch
        {
            return null;
        }
    }
    
    private int GetXmlFileCount(string directoryPath)
    {
        if (string.IsNullOrEmpty(directoryPath) || !Directory.Exists(directoryPath))
            return 0;
            
        try
        {
            return Directory.GetFiles(directoryPath, "*.xml", SearchOption.AllDirectories).Length;
        }
        catch
        {
            return 0;
        }
    }

    private void HandleFolder1FilesChanged(List<string> files)
    {
        Folder1Files = files;
    }

    private void HandleFolder2FilesChanged(List<string> files)
    {
        Folder2Files = files;
    }

    private async Task OpenPropertySelector()
    {
        await propertySelector.ShowAsync();
    }

    private void AddIgnoreRule(IgnoreRule rule)
    {
        var existingRule = IgnoreRules.FirstOrDefault(r => r.PropertyPath == rule.PropertyPath);
        if (existingRule != null)
        {
            IgnoreRules.Remove(existingRule);
        }

        IgnoreRules.Add(rule);

        if (rule.IgnoreCompletely)
        {
            ConfigService.IgnoreProperty(rule.PropertyPath);
        }
        else
        {
            ConfigService.AddIgnoreRule(rule);
        }
    }

    private void RemoveIgnoreRule(IgnoreRule rule)
    {
        if (rule == null) return;

        IgnoreRules.Remove(rule);

        // Also remove from the service
        if (rule.IgnoreCompletely)
        {
            ConfigService.RemoveIgnoredProperty(rule.PropertyPath);
        }
    }
    
    private async Task BrowseDirectory1()
    {
        var result = await JSRuntime.InvokeAsync<string>("browseFolder", "Select V1 Directory");
        if (!string.IsNullOrEmpty(result))
        {
            Directory1Path = result;
            StateHasChanged();
        }
    }
    
    private async Task BrowseDirectory2()
    {
        var result = await JSRuntime.InvokeAsync<string>("browseFolder", "Select V2 Directory");
        if (!string.IsNullOrEmpty(result))
        {
            Directory2Path = result;
            StateHasChanged();
        }
    }
    
    private async Task RunDirectoryComparison()
    {
        if (!CanRunDirectoryComparison)
            return;
            
        try
        {
            await ClearAndReset();
            
            IsComparing = true;
            IsCancellable = true;
            Progress = new ComparisonProgress(0, 0, "Preparing comparison...");

            await ResetCancellationToken();
            var cancellationToken = _cancellationTokenSource.Token;

            ConfigService.SetIgnoreCollectionOrder(IgnoreCollectionOrder);
            ConfigService.SetIgnoreStringCase(IgnoreStringCase);

            foreach (var rule in IgnoreRules)
            {
                ConfigService.AddIgnoreRule(rule);
            }

            ConfigService.ApplyConfiguredSettings();
            
            // Create progress reporter
            var progressReporter = new Progress<ComparisonProgress>(progress =>
            {
                Progress = progress;
                StateHasChanged();
            });
            
            // Run the comparison
            FolderComparisonResult = await DirectoryComparisonService.CompareDirectoriesAsync(
                Directory1Path,
                Directory2Path,
                SelectedModelName,
                EnablePatternAnalysis,
                EnableSemanticAnalysis,
                progressReporter,
                cancellationToken);
                
            // Select the first result if there are differences
            if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 0)
            {
                SelectPairResult(0);
            }
            
            // Get pattern and semantic analysis from metadata if available
            if (FolderComparisonResult.Metadata.TryGetValue("PatternAnalysis", out var patternAnalysisObj))
            {
                PatternAnalysis = patternAnalysisObj as ComparisonPatternAnalysis;
                ShowPatternSummary = true;
            }
            
            if (FolderComparisonResult.Metadata.TryGetValue("SemanticAnalysis", out var semanticAnalysisObj))
            {
                SemanticAnalysis = semanticAnalysisObj as SemanticDifferenceAnalysis;
            }
            
            // Generate structural analysis if needed
            if (EnableStructuralAnalysis && !FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 1)
            {
                await GenerateStructuralAnalysis();
            }
            
            // Generate enhanced structural analysis if needed
            if (EnableEnhancedStructuralAnalysis && !FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 1)
            {
                await GenerateEnhancedStructuralAnalysis();
            }
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Comparison operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error comparing directories: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error comparing directories: {ex.Message}");
        }
        finally
        {
            IsComparing = false;
            IsCancellable = false;
            StateHasChanged();
        }
    }

    private async Task RunFolderComparison()
    {
        if (!CanRunFolderComparison)
            return;

        try
        {
            await ClearAndReset();
            
            IsComparing = true;
            IsCancellable = true;
            Progress = new ComparisonProgress(0, 0, "Preparing comparison...");

            await ResetCancellationToken();
            var cancellationToken = _cancellationTokenSource.Token;

            ConfigService.SetIgnoreCollectionOrder(IgnoreCollectionOrder);
            ConfigService.SetIgnoreStringCase(IgnoreStringCase);

            foreach (var rule in IgnoreRules)
            {
                ConfigService.AddIgnoreRule(rule);
            }

            ConfigService.ApplyConfiguredSettings();

            // Create progress reporter
            var progressReporter = new Progress<ComparisonProgress>(progress =>
            {
                Progress = progress;
                StateHasChanged();
            });

            // Use folder uploads method
            if (Folder1Files.Count > 500 || Folder2Files.Count > 500)
            {
                FolderComparisonResult = await DirectoryComparisonService.CompareFolderUploadsAsync(
                    Folder1Files,
                    Folder2Files,
                    SelectedModelName,
                    EnablePatternAnalysis,
                    EnableSemanticAnalysis,
                    progressReporter,
                    cancellationToken);
                    
                // Get pattern and semantic analysis from metadata if available
                if (FolderComparisonResult.Metadata.TryGetValue("PatternAnalysis", out var patternAnalysisObj))
                {
                    PatternAnalysis = patternAnalysisObj as ComparisonPatternAnalysis;
                    ShowPatternSummary = true;
                }
                
                if (FolderComparisonResult.Metadata.TryGetValue("SemanticAnalysis", out var semanticAnalysisObj))
                {
                    SemanticAnalysis = semanticAnalysisObj as SemanticDifferenceAnalysis;
                }
            }
            else
            {
                // Use standard comparison service for smaller sets
                FolderComparisonResult = await ComparisonService.CompareFoldersAsync(
                    Folder1Files,
                    Folder2Files,
                    SelectedModelName,
                    cancellationToken);

                // Select the first result if there are differences
                if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 0)
                {
                    SelectPairResult(0);
                }

                // Generate pattern analysis if configured
                if (!FolderComparisonResult.AllEqual && FolderComparisonResult.FilePairResults.Count > 1 && EnablePatternAnalysis)
                {
                    // Analyze patterns
                    await GeneratePatternAnalysis();
                    
                    // Generate semantic analysis if needed
                    if (PatternAnalysis != null && EnableSemanticAnalysis)
                    {
                        await GenerateSemanticAnalysis();
                    }
                    
                    // Generate structural analysis if enabled
                    if (EnableStructuralAnalysis && !FolderComparisonResult.AllEqual)
                    {
                        Progress = new ComparisonProgress(0, 0, "Starting structural analysis...");
                        StateHasChanged();
                        await Task.Delay(100); // Ensure UI updates
                        await GenerateStructuralAnalysis();
                    }
                    
                    // Generate enhanced structural analysis if enabled
                    if (EnableEnhancedStructuralAnalysis && !FolderComparisonResult.AllEqual)
                    {
                        Progress = new ComparisonProgress(0, 0, "Starting enhanced structural analysis...");
                        StateHasChanged();
                        await Task.Delay(100); // Ensure UI updates
                        await GenerateEnhancedStructuralAnalysis();
                    }
                }
            }
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Comparison operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error comparing files: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error comparing files: {ex.Message}");
        }
        finally
        {
            IsComparing = false;
            IsCancellable = false;
            StateHasChanged();
        }
    }
    
    private async Task ResetCancellationToken()
    {
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
        _cancellationTokenSource = new CancellationTokenSource();
    }
    
    private async Task CancelComparison()
    {
        if (IsCancellable)
        {
            await _cancellationTokenSource.CancelAsync();
            IsCancellable = false;
        }
    }

    private async Task SelectPairResult(int index)
    {
        if (FolderComparisonResult == null || index < 0 || index >= FolderComparisonResult.FilePairResults.Count)
            return;
            
        SelectedPairIndex = index;

        var selectedPair = FolderComparisonResult.FilePairResults[index];
        ComparisonResult = selectedPair.Result;
        DifferenceSummary = selectedPair.Summary;
        
        // Scroll to the detailed differences section after selection
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", "detailed-differences-section");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to scroll to detailed differences section.");
        }
        
        StateHasChanged(); // Ensure UI updates with selection
    }

    private void ToggleShowAllDifferences()
    {
        ShowAllDifferences = !ShowAllDifferences;
    }

    private async Task GeneratePatternAnalysis()
    {
        if (FolderComparisonResult == null)
            return;

        try
        {
            // Create progress reporter
            var progress = new Progress<ComparisonProgress>(p =>
            {
                Progress = p;
                StateHasChanged();
            });

            await ResetCancellationToken();
            var cancellationToken = _cancellationTokenSource.Token;

            Progress = new ComparisonProgress(0, 0, "Analyzing patterns...");
            StateHasChanged();

            PatternAnalysis = await ComparisonService.AnalyzePatternsAsync(
                FolderComparisonResult,
                cancellationToken);

            // Add to metadata to save with results
            if (FolderComparisonResult.Metadata.ContainsKey("PatternAnalysis"))
                FolderComparisonResult.Metadata["PatternAnalysis"] = PatternAnalysis;
            else
                FolderComparisonResult.Metadata.Add("PatternAnalysis", PatternAnalysis);

            ShowPatternSummary = true;
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Pattern analysis operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error analyzing patterns: {Message}", ex.Message);
        }
    }

    private async Task GenerateSemanticAnalysis()
    {
        if (FolderComparisonResult == null || PatternAnalysis == null)
            return;

        try
        {
            var cancellationToken = _cancellationTokenSource.Token;

            SemanticAnalysis = await ComparisonService.AnalyzeSemanticDifferencesAsync(
                FolderComparisonResult,
                PatternAnalysis,
                cancellationToken);
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Semantic analysis operation was canceled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating semantic analysis: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error generating semantic analysis: {ex.Message}");
        }
    }

    private async Task GenerateStructuralAnalysis()
    {
        if (FolderComparisonResult == null)
            return;
        
        try
        {
            Logger.LogInformation("Starting structural pattern analysis...");
            Progress = new ComparisonProgress(0, 0, "Generating structural pattern analysis...");
            StateHasChanged();
            
            await Task.Delay(100); // Allow UI to update
            
            var structuralAnalyzer = new StructuralDifferenceAnalyzer(FolderComparisonResult, Logger);
            StructuralAnalysis = structuralAnalyzer.AnalyzeStructuralPatterns();
            
            Logger.LogInformation("Structural analysis completed. Found patterns: {MissingElements}, {MissingProps}, {OrderDiffs}",
                StructuralAnalysis?.MissingCollectionElements?.Count ?? 0,
                StructuralAnalysis?.ConsistentlyMissingProperties?.Count ?? 0,
                StructuralAnalysis?.ElementOrderDifferences?.Count ?? 0);
            
            // Add to metadata to save with results
            if (FolderComparisonResult.Metadata.ContainsKey("StructuralAnalysis"))
                FolderComparisonResult.Metadata["StructuralAnalysis"] = StructuralAnalysis;
            else
                FolderComparisonResult.Metadata.Add("StructuralAnalysis", StructuralAnalysis);
            
            Progress = new ComparisonProgress(0, 0, "Structural analysis complete");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating structural pattern analysis");
            Progress = new ComparisonProgress(0, 0, "Error generating structural analysis");
            StateHasChanged();
        }
    }

    private async Task GenerateEnhancedStructuralAnalysis()
    {
        if (FolderComparisonResult == null)
            return;
        
        try
        {
            Logger.LogInformation("Starting enhanced structural pattern analysis...");
            Progress = new ComparisonProgress(0, 0, "Generating enhanced structural pattern analysis...");
            StateHasChanged();
            
            await Task.Delay(100); // Allow UI to update
            
            var enhancedStructuralAnalyzer = new EnhancedStructuralDifferenceAnalyzer(FolderComparisonResult, Logger);
            EnhancedStructuralAnalysis = enhancedStructuralAnalyzer.AnalyzeStructuralPatterns();
            
            Logger.LogInformation("Enhanced structural analysis completed. Found patterns: {Critical}, {MissingElements}, {MissingProps}, {ValueDiffs}, {OrderDiffs}",
                EnhancedStructuralAnalysis?.CriticalMissingElements?.Count ?? 0,
                EnhancedStructuralAnalysis?.MissingCollectionElements?.Count ?? 0,
                EnhancedStructuralAnalysis?.ConsistentlyMissingProperties?.Count ?? 0,
                EnhancedStructuralAnalysis?.ConsistentValueDifferences?.Count ?? 0,
                EnhancedStructuralAnalysis?.ElementOrderDifferences?.Count ?? 0);
            
            // Add to metadata to save with results
            if (FolderComparisonResult.Metadata.ContainsKey("EnhancedStructuralAnalysis"))
                FolderComparisonResult.Metadata["EnhancedStructuralAnalysis"] = EnhancedStructuralAnalysis;
            else
                FolderComparisonResult.Metadata.Add("EnhancedStructuralAnalysis", EnhancedStructuralAnalysis);
            
            Progress = new ComparisonProgress(0, 0, "Enhanced structural analysis complete");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating enhanced structural pattern analysis");
            Progress = new ComparisonProgress(0, 0, "Error generating enhanced structural analysis");
            StateHasChanged();
        }
    }

    private async Task ExportFolderResults()
    {
        if (FolderComparisonResult == null || SelectedPairIndex < 0)
            return;

        try
        {
            var selectedPair = FolderComparisonResult.FilePairResults[SelectedPairIndex];
            var file1Name = Path.GetFileNameWithoutExtension(selectedPair.File1Name);
            var file2Name = Path.GetFileNameWithoutExtension(selectedPair.File2Name);

            var headerInfo = $"# Comparison Report\n\n" +
                          $"V1 file: **{selectedPair.File1Name}**\n\n" +
                          $"V2 file: **{selectedPair.File2Name}**\n\n" +
                          $"---\n\n";

            var report = FileUtilities.GenerateReportMarkdown(selectedPair.Summary, headerInfo);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                $"comparison-{file1Name}-vs-{file2Name}.md",
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting folder results: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting results: {ex.Message}");
        }
    }

    private async Task ExportAllFolderResults()
    {
        if (FolderComparisonResult == null || FolderComparisonResult.FilePairResults.Count == 0)
            return;

        try
        {
            string report = FileUtilities.GenerateFolderComparisonReport(FolderComparisonResult);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                "folder-comparison-report.md",
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting all folder results: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting results: {ex.Message}");
        }
    }

    private async Task ExportPatternAnalysisReport(string filename)
    {
        if (PatternAnalysis == null)
            return;

        try
        {
            var report = FileUtilities.GeneratePatternAnalysisReport(PatternAnalysis);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting pattern analysis: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting pattern analysis: {ex.Message}");
        }
    }

    private async Task ExportSemanticAnalysisReport(string filename)
    {
        if (SemanticAnalysis == null)
            return;

        try
        {
            var report = FileUtilities.GenerateSemanticAnalysisReport(SemanticAnalysis);

            await JSRuntime.InvokeVoidAsync(
                "saveAsFile",
                filename,
                "text/markdown",
                report);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting semantic analysis: {Message}", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting semantic analysis: {ex.Message}");
        }
    }

    private async Task ClearAndReset()
    {
        try
        {
            // Reset all comparison results
            ComparisonResult = null;
            DifferenceSummary = null;
            FolderComparisonResult = null;
            SelectedPairIndex = -1;
            PatternAnalysis = null;
            SemanticAnalysis = null;
            StructuralAnalysis = null;
            EnhancedStructuralAnalysis = null;
            ShowPatternSummary = false;
            ShowAllDifferences = false;
            
            // Force garbage collection to clean up memory
            GC.Collect();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing comparison results");
        }
    }
}