@rendermode InteractiveServer
@page "/"
@using System.IO
@using KellermanSoftware.CompareNetObjects
@using ComparisonTool.Core
@inject XmlComparisonService ComparisonService
@inject IJSRuntime JSRuntime

<h1>XML Comparison Tool</h1>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Step 1: Select XML Files</h5>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label>Select Domain Model:</label>
                    <select class="form-control" @bind="SelectedModelName">
                        @foreach (var modelName in ComparisonService.GetRegisteredModelNames())
                        {
                            <option value="@modelName">@modelName</option>
                        }
                    </select>
                </div>
                
                <div class="form-group mt-3">
                    <label>Old XML File:</label>
                    <InputFile class="form-control" OnChange="HandleOldFileUpload" />
                    @if (!string.IsNullOrEmpty(OldFileName))
                    {
                        <span class="text-success">File loaded: @OldFileName</span>
                    }
                </div>
                
                <div class="form-group mt-3">
                    <label>New XML File:</label>
                    <InputFile class="form-control" OnChange="HandleNewFileUpload" />
                    @if (!string.IsNullOrEmpty(NewFileName))
                    {
                        <span class="text-success">File loaded: @NewFileName</span>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Step 2: Configure Comparison</h5>
            </div>
            <div class="card-body">
                <div class="form-group form-check">
                    <input type="checkbox" class="form-check-input" id="ignoreOrder" 
                           @bind="IgnoreCollectionOrder" />
                    <label class="form-check-label" for="ignoreOrder">
                        Ignore Collection Ordering
                    </label>
                </div>
                
                <div class="form-group form-check mt-2">
                    <input type="checkbox" class="form-check-input" id="ignoreCase" 
                           @bind="IgnoreStringCase" />
                    <label class="form-check-label" for="ignoreCase">
                        Ignore String Case
                    </label>
                </div>
                
                <div class="form-group mt-3">
                    <label>Decimal Tolerance:</label>
                    <input type="number" class="form-control" @bind="DecimalTolerance" step="0.001" min="0" />
                </div>
                
                <div class="form-group mt-3">
                    <label>Properties to Ignore:</label>
                    <button class="btn btn-sm btn-primary ms-2" @onclick="OpenPropertySelector">
                        Configure Properties
                    </button>
                    
                    @if (IgnoreRules.Any())
                    {
                        <div class="mt-2">
                            <div class="card">
                                <div class="card-header bg-light">
                                    Currently Ignored Properties (@IgnoreRules.Count)
                                </div>
                                <ul class="list-group list-group-flush">
                                    @foreach (var rule in IgnoreRules)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <span class="me-2">@GetIgnoreRuleDescription(rule)</span>
                                            </div>
                                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveIgnoreRule(rule)">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mt-2">
                            No properties are currently being ignored. Click the button to configure.
                        </div>
                    }
                </div>
                
                <button class="btn btn-primary mt-3" @onclick="RunComparison" 
                        disabled="@(!CanRunComparison)">
                    Run Comparison
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsComparing)
{
    <div class="text-center mt-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Comparing XML files...</p>
    </div>
}

@if (ComparisonResult != null)
{
    <div class="mt-4">
        <EnhancedDifferenceSummary Summary="DifferenceSummary" />
    </div>
    
    @if (!DifferenceSummary.AreEqual)
    {
        <div class="mt-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Detailed Differences</h5>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleShowAllDifferences">
                        @(ShowAllDifferences ? "Show Top 100" : "Show All")
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Property</th>
                                    <th>Old Value</th>
                                    <th>New Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var diff in GetFilteredDifferences())
                                {
                                    <tr>
                                        <td>@diff.PropertyName</td>
                                        <td class="text-danger">@FormatValue(diff.Object1Value)</td>
                                        <td class="text-success">@FormatValue(diff.Object2Value)</td>
                                    </tr>
                                }
                                @if (ComparisonResult.Differences.Count > 100 && !ShowAllDifferences)
                                {
                                    <tr>
                                        <td colspan="3" class="text-center">
                                            <em>And @(ComparisonResult.Differences.Count - 100) more differences...</em>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="mt-4 mb-5">
            <button class="btn btn-outline-primary" @onclick="ExportResults">
                <i class="bi bi-download me-2"></i> Export Results
            </button>
        </div>
    }
}

<!-- Property Selector Modal -->
<HierarchicalPropertySelector @ref="propertySelector"
                             ModelType="ComparisonService.GetModelType(SelectedModelName)"
                             IgnoredProperties="IgnoreRules"
                             OnPropertyAdded="AddIgnoreRule"
                             OnPropertyRemoved="propertyPath => RemoveIgnoreRule(IgnoreRules.FirstOrDefault(r => r.PropertyPath == propertyPath))" />

@code {
    // State variables
    private string SelectedModelName { get; set; }
    private string OldFileName { get; set; }
    private string NewFileName { get; set; }
    private MemoryStream OldFileContent { get; set; }
    private MemoryStream NewFileContent { get; set; }
    private bool IgnoreCollectionOrder { get; set; } = true;
    private bool IgnoreStringCase { get; set; } = true;
    private double DecimalTolerance { get; set; } = 0.001;
    private List<IgnoreRule> IgnoreRules { get; set; } = new List<IgnoreRule>();
    private bool IsComparing { get; set; } = false;
    private ComparisonResult ComparisonResult { get; set; }
    private DifferenceSummary DifferenceSummary { get; set; }
    private bool ShowAllDifferences { get; set; } = false;
    
    // Property selector
    private HierarchicalPropertySelector propertySelector;
    
    // Enable the comparison button if both files are loaded
    private bool CanRunComparison => 
        !string.IsNullOrEmpty(SelectedModelName) && 
        OldFileContent != null && 
        NewFileContent != null;
    
    protected override void OnInitialized()
    {
        // Set initial selection
        SelectedModelName = ComparisonService.GetRegisteredModelNames().FirstOrDefault();
        
        // Get current configuration settings from the service directly
        IgnoreCollectionOrder = ComparisonService.GetIgnoreCollectionOrder();
        IgnoreStringCase = ComparisonService.GetIgnoreStringCase();
        DecimalTolerance = ComparisonService.GetDecimalTolerance();
        
        // Convert simple ignored properties to rules
        foreach (var prop in ComparisonService.GetIgnoredProperties())
        {
            IgnoreRules.Add(new IgnoreRule 
            { 
                PropertyPath = prop,
                IgnoreCompletely = true
            });
        }
    }
    
    // File handling
    private async Task HandleOldFileUpload(InputFileChangeEventArgs e)
    {
        try 
        {
            var file = e.File;
            OldFileName = file.Name;
            
            // Create a stream to store the file content
            OldFileContent = new MemoryStream();
            
            // Copy the file data to the stream
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(OldFileContent);
            OldFileContent.Position = 0;
            
            // Force UI refresh
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading old file: {ex.Message}");
            OldFileName = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task HandleNewFileUpload(InputFileChangeEventArgs e)
    {
        try 
        {
            var file = e.File;
            NewFileName = file.Name;
            
            // Create a stream to store the file content
            NewFileContent = new MemoryStream();
            
            // Copy the file data to the stream
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(NewFileContent);
            NewFileContent.Position = 0;
            
            // Force UI refresh
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading new file: {ex.Message}");
            NewFileName = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task OpenPropertySelector()
    {
        await propertySelector.ShowAsync();
    }
    
    private void AddIgnoreRule(IgnoreRule rule)
    {
        // Remove any existing rule for this property
        var existingRule = IgnoreRules.FirstOrDefault(r => r.PropertyPath == rule.PropertyPath);
        if (existingRule != null)
        {
            IgnoreRules.Remove(existingRule);
        }
        
        // Add the new rule
        IgnoreRules.Add(rule);
        
        // If complete ignore, also add to the service
        if (rule.IgnoreCompletely)
        {
            ComparisonService.IgnoreProperty(rule.PropertyPath);
        }
    }
    
    private void RemoveIgnoreRule(IgnoreRule rule)
    {
        IgnoreRules.Remove(rule);
        
        // Also remove from the service
        if (rule.IgnoreCompletely)
        {
            ComparisonService.RemoveIgnoredProperty(rule.PropertyPath);
        }
    }
    
    private string GetIgnoreRuleDescription(IgnoreRule rule)
    {
        var description = rule.PropertyPath;
        
        if (rule.IgnoreCompletely)
        {
            description += " (Ignored completely)";
        }
        else
        {
            var options = new List<string>();
            
            if (rule.IgnoreCollectionOrder)
                options.Add("ignore order");
                
            if (rule.IgnoreCase)
                options.Add("ignore case");
                
            if (rule.NumericTolerance > 0)
                options.Add($"tolerance: {rule.NumericTolerance}");
                
            if (options.Any())
            {
                description += $" ({string.Join(", ", options)})";
            }
        }
        
        return description;
    }
    
    private async Task RunComparison()
    {
        if (!CanRunComparison)
            return;
            
        IsComparing = true;
        ComparisonResult = null;
        DifferenceSummary = null;
        ShowAllDifferences = false;
        
        try
        {
            // Update configuration
            ComparisonService.SetIgnoreCollectionOrder(IgnoreCollectionOrder);
            ComparisonService.SetIgnoreStringCase(IgnoreStringCase);
            ComparisonService.SetDecimalTolerance(DecimalTolerance);
            
            // Apply all ignore rules
            foreach (var rule in IgnoreRules)
            {
                rule.ApplyTo(ComparisonService.GetCurrentConfig());
            }
            
            // Run comparison
            OldFileContent.Position = 0;
            NewFileContent.Position = 0;
            ComparisonResult = await ComparisonService.CompareXmlFilesAsync(
                OldFileContent, 
                NewFileContent, 
                SelectedModelName);
                
            // Generate enhanced summary
            var categorizer = new DifferenceCategorizer();
            DifferenceSummary = categorizer.CategorizeAndSummarize(ComparisonResult);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error comparing files: {ex.Message}");
            Console.WriteLine($"Error running comparison: {ex.Message}");
        }
        finally
        {
            IsComparing = false;
            StateHasChanged();
        }
    }
    
    private IEnumerable<Difference> GetFilteredDifferences()
    {
        if (ComparisonResult == null || ComparisonResult.Differences.Count == 0)
            return Enumerable.Empty<Difference>();
            
        return ShowAllDifferences 
            ? ComparisonResult.Differences 
            : ComparisonResult.Differences.Take(100);
    }
    
    private void ToggleShowAllDifferences()
    {
        ShowAllDifferences = !ShowAllDifferences;
    }
    
    private string FormatValue(object value)
    {
        if (value == null)
            return "null";
            
        if (value is DateTime dt)
            return dt.ToString("yyyy-MM-dd HH:mm:ss");
            
        if (value is string str && str.Length > 100)
            return str.Substring(0, 97) + "...";
            
        return value.ToString();
    }
    
    private async Task ExportResults()
    {
        if (DifferenceSummary == null)
            return;
            
        var report = DifferenceSummary.GenerateReport();
        
        // In a real app, you would use JSInterop to download the file
        await JSRuntime.InvokeVoidAsync(
            "saveAsFile", 
            "comparison-report.md", 
            "text/markdown", 
            report);
    }
}