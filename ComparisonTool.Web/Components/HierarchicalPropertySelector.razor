@using System.Reflection
@using BlazorBootstrap

<Modal @ref="propertyModal" Title="Select Properties to Ignore" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="row">
            <div class="col-12">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Search properties..."
                           @bind-value="searchTerm" @bind-value:event="oninput" />
                    <button class="btn btn-outline-secondary" type="button" @onclick="SearchProperties">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>

                <div class="mt-3">
                    <h5>All Properties</h5>
                    <div style="max-height: 300px; overflow-y: auto;">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Property Path</th>
                                    <th>Type</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var prop in FilteredProperties)
                                {
                                    <tr @onclick="() => SelectProperty(prop.Path)"
                                        class="@(selectedProperty == prop.Path ? "table-primary" : "")">
                                        <td>@prop.Path</td>
                                        <td>@prop.TypeName</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => SelectProperty(prop.Path)">
                                                Select
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="mt-4">
                    <h5>Selected Property Configuration</h5>
                    @if (!string.IsNullOrEmpty(selectedProperty))
                    {
                        <div class="alert alert-info">
                            <strong>@selectedProperty</strong>
                        </div>

                        <div class="card">
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="ignoreProperty"
                                           @bind="IgnoreProperty">
                                    <label class="form-check-label" for="ignoreProperty">
                                        Ignore this property completely
                                    </label>
                                </div>

                                @if (IsCollectionProperty(selectedProperty))
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="ignoreOrdering"
                                               @bind="IgnoreCollectionOrder">
                                        <label class="form-check-label" for="ignoreOrdering">
                                            Ignore collection ordering
                                        </label>
                                    </div>
                                }

                                @if (IsStringProperty(selectedProperty))
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="ignoreCase"
                                               @bind="IgnoreCase">
                                        <label class="form-check-label" for="ignoreCase">
                                            Ignore case sensitivity
                                        </label>
                                    </div>
                                }

                                @if (IsNumericProperty(selectedProperty))
                                {
                                    <div class="form-group mb-2">
                                        <label for="tolerance">Decimal tolerance:</label>
                                        <input type="number" class="form-control" id="tolerance"
                                               step="0.001" min="0" @bind="NumericTolerance">
                                        <small class="form-text text-muted">
                                            Values differing by less than this will be considered equal
                                        </small>
                                    </div>
                                }

                                <button class="btn btn-success mt-3" @onclick="AddCurrentProperty">
                                    <i class="bi bi-plus-circle"></i> Add to Ignore List
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary">
                            No property selected. Select a property from the list above.
                        </div>
                    }
                </div>

                <div class="mt-4">
                    <h5>Currently Ignored Properties</h5>
                    @if (IgnoredProperties.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Property</th>
                                    <th>Ignore Settings</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rule in IgnoredProperties)
                                {
                                    <tr>
                                        <td>@rule.PropertyPath</td>
                                        <td>@GetIgnoreRuleDescription(rule)</td>
                                        <td>
                                            <button class="btn btn-sm btn-danger"
                                                    @onclick="() => RemoveIgnoredProperty(rule.PropertyPath)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-secondary">
                            No properties are currently being ignored.
                        </div>
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="ClosePropertySelector">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter]
    public Type ModelType { get; set; }

    [Parameter]
    public List<IgnoreRule> IgnoredProperties { get; set; } = new List<IgnoreRule>();

    [Parameter]
    public EventCallback<IgnoreRule> OnPropertyAdded { get; set; }

    [Parameter]
    public EventCallback<string> OnPropertyRemoved { get; set; }

    private Modal propertyModal;
    private string selectedProperty;
    private string searchTerm = "";
    private bool IgnoreProperty { get; set; }
    private bool IgnoreCollectionOrder { get; set; }
    private bool IgnoreCase { get; set; }
    private double NumericTolerance { get; set; } = 0.001;

    private List<PropertyInfo> AllProperties { get; set; } = new List<PropertyInfo>();
    private List<PropertyViewModel> FilteredProperties { get; set; } = new List<PropertyViewModel>();

    private class PropertyViewModel
    {
        public string Path { get; set; }
        public string TypeName { get; set; }
    }

    public async Task ShowAsync()
    {
        if (ModelType != null && AllProperties.Count == 0)
        {
            LoadAllProperties();
            SearchProperties();
        }

        ResetSelectionState();
        await propertyModal.ShowAsync();
    }

    private void LoadAllProperties()
    {
        var paths = GetAllPropertyPaths(ModelType);
        FilteredProperties = paths.Select(p => new PropertyViewModel
            {
                Path = p.Key,
                TypeName = GetFriendlyTypeName(p.Value)
            }).ToList();
    }

    private Dictionary<string, Type> GetAllPropertyPaths(Type type, string basePath = "", int depth = 0)
    {
        var result = new Dictionary<string, Type>();

        if (depth > 5) // Limit recursion depth
            return result;

        foreach (var prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            string path = string.IsNullOrEmpty(basePath) ? prop.Name : $"{basePath}.{prop.Name}";
            result[path] = prop.PropertyType;

            // Recursively process complex properties
            if (!prop.PropertyType.IsPrimitive &&
                prop.PropertyType != typeof(string) &&
                prop.PropertyType != typeof(DateTime) &&
                prop.PropertyType != typeof(Guid) &&
                !prop.PropertyType.IsEnum)
            {
                // For collections, add [*] notation and process element type
                if (typeof(System.Collections.IEnumerable).IsAssignableFrom(prop.PropertyType) &&
                    prop.PropertyType != typeof(string))
                {
                    Type elementType = null;

                    if (prop.PropertyType.IsGenericType)
                    {
                        var genericArgs = prop.PropertyType.GetGenericArguments();
                        if (genericArgs.Length > 0)
                            elementType = genericArgs[0];
                    }
                    else if (prop.PropertyType.IsArray)
                    {
                        elementType = prop.PropertyType.GetElementType();
                    }

                    if (elementType != null &&
                        !elementType.IsPrimitive &&
                        elementType != typeof(string))
                    {
                        // Add collection path
                        result[$"{path}[*]"] = prop.PropertyType;

                        // Process element type properties
                        var childProps = GetAllPropertyPaths(elementType, $"{path}[*]", depth + 1);
                        foreach (var childProp in childProps)
                        {
                            result[childProp.Key] = childProp.Value;
                        }
                    }
                }
                else
                {
                    // Process regular complex type
                    var childProps = GetAllPropertyPaths(prop.PropertyType, path, depth + 1);
                    foreach (var childProp in childProps)
                    {
                        result[childProp.Key] = childProp.Value;
                    }
                }
            }
        }

        return result;
    }

    private void SearchProperties()
    {
        Console.WriteLine($"Searching for: {searchTerm}");

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            // No search term, show all properties
            FilteredProperties = FilteredProperties.ToList();
        }
        else
        {
            // Filter properties by search term
            FilteredProperties = FilteredProperties
                .Where(p => p.Path.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged();
    }

    private void SelectProperty(string propertyPath)
    {
        Console.WriteLine($"Selected property: {propertyPath}");
        selectedProperty = propertyPath;

        // Check if this property is already being ignored
        var existingRule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == propertyPath);
        if (existingRule != null)
        {
            IgnoreProperty = existingRule.IgnoreCompletely;
            IgnoreCollectionOrder = existingRule.IgnoreCollectionOrder;
            IgnoreCase = existingRule.IgnoreCase;
            NumericTolerance = existingRule.NumericTolerance;
        }
        else
        {
            IgnoreProperty = false;
            IgnoreCollectionOrder = IsCollectionProperty(propertyPath);
            IgnoreCase = IsStringProperty(propertyPath);
            NumericTolerance = 0.001;
        }

        StateHasChanged();
    }

    private void ResetSelectionState()
    {
        selectedProperty = null;
        IgnoreProperty = false;
        IgnoreCollectionOrder = false;
        IgnoreCase = false;
        NumericTolerance = 0.001;
    }

    private async Task AddCurrentProperty()
    {
        if (string.IsNullOrEmpty(selectedProperty))
            return;

        var rule = new IgnoreRule
            {
                PropertyPath = selectedProperty,
                IgnoreCompletely = IgnoreProperty,
                IgnoreCollectionOrder = IgnoreCollectionOrder,
                IgnoreCase = IgnoreCase,
                NumericTolerance = NumericTolerance
            };

        // Remove existing rule for this property if it exists
        var existingRule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == selectedProperty);
        if (existingRule != null)
        {
            IgnoredProperties.Remove(existingRule);
        }

        // Add the new rule
        IgnoredProperties.Add(rule);

        // Notify parent
        await OnPropertyAdded.InvokeAsync(rule);

        // Reset selection
        ResetSelectionState();
    }

    private async Task RemoveIgnoredProperty(string propertyPath)
    {
        var rule = IgnoredProperties.FirstOrDefault(p => p.PropertyPath == propertyPath);
        if (rule != null)
        {
            IgnoredProperties.Remove(rule);
            await OnPropertyRemoved.InvokeAsync(propertyPath);
        }
    }

    private void ClosePropertySelector()
    {
        propertyModal.HideAsync();
    }

    private bool IsCollectionProperty(string propertyPath)
    {
        return propertyPath.Contains("[") ||
               propertyPath.EndsWith("List") ||
               propertyPath.EndsWith("Collection") ||
               propertyPath.EndsWith("Array");
    }

    private bool IsStringProperty(string propertyPath)
    {
        var prop = FilteredProperties.FirstOrDefault(p => p.Path == propertyPath);
        return prop?.TypeName == "string";
    }

    private bool IsNumericProperty(string propertyPath)
    {
        var prop = FilteredProperties.FirstOrDefault(p => p.Path == propertyPath);
        var typeName = prop?.TypeName;

        return typeName == "int" ||
               typeName == "double" ||
               typeName == "decimal" ||
               typeName == "float" ||
               typeName == "long";
    }

    private string GetFriendlyTypeName(Type type)
    {
        if (type == typeof(int)) return "int";
        if (type == typeof(string)) return "string";
        if (type == typeof(bool)) return "bool";
        if (type == typeof(double)) return "double";
        if (type == typeof(decimal)) return "decimal";
        if (type == typeof(float)) return "float";
        if (type == typeof(DateTime)) return "datetime";
        if (type == typeof(Guid)) return "guid";

        if (typeof(System.Collections.IEnumerable).IsAssignableFrom(type) && type != typeof(string))
        {
            Type elementType = null;

            if (type.IsGenericType)
            {
                var genericArgs = type.GetGenericArguments();
                if (genericArgs.Length > 0)
                    elementType = genericArgs[0];
            }
            else if (type.IsArray)
            {
                elementType = type.GetElementType();
            }

            if (elementType != null)
                return $"List<{GetFriendlyTypeName(elementType)}>";
            else
                return "Collection";
        }

        return type.Name;
    }

    private string GetIgnoreRuleDescription(IgnoreRule rule)
    {
        var options = new List<string>();

        if (rule.IgnoreCompletely)
            options.Add("ignore completely");

        if (rule.IgnoreCollectionOrder)
            options.Add("ignore order");

        if (rule.IgnoreCase)
            options.Add("ignore case");

        if (rule.NumericTolerance > 0)
            options.Add($"tolerance: {rule.NumericTolerance}");

        return string.Join(", ", options);
    }
}